{"version":3,"file":"191.js","mappings":"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","sources":["webpack://@lenna-proj/lenna-web/./node_modules/@vue/devtools-api/lib/esm/env.js","webpack://@lenna-proj/lenna-web/./node_modules/vue-router/dist/vue-router.esm-bundler.js","webpack://@lenna-proj/lenna-web/./node_modules/@vue/devtools-api/lib/esm/index.js","webpack://@lenna-proj/lenna-web/./node_modules/@vue/devtools-api/lib/esm/const.js"],"sourcesContent":["export function getDevtoolsGlobalHook() {\n    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;\n}\nexport function getTarget() {\n    // @ts-ignore\n    return typeof navigator !== 'undefined'\n        ? window\n        : typeof global !== 'undefined'\n            ? global\n            : {};\n}\n","/*!\n  * vue-router v4.0.11\n  * (c) 2021 Eduardo San Martin Morote\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, onUnmounted, onDeactivated, onActivated, computed, unref, watchEffect, defineComponent, reactive, h, provide, ref, watch, shallowRef, nextTick } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nconst hasSymbol = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\r\nconst PolySymbol = (name) => \r\n// vr = vue router\r\nhasSymbol\r\n    ? Symbol((process.env.NODE_ENV !== 'production') ? '[vue-router]: ' + name : name)\r\n    : ((process.env.NODE_ENV !== 'production') ? '[vue-router]: ' : '_vr_') + name;\r\n// rvlm = Router View Location Matched\r\n/**\r\n * RouteRecord being rendered by the closest ancestor Router View. Used for\r\n * `onBeforeRouteUpdate` and `onBeforeRouteLeave`. rvlm stands for Router View\r\n * Location Matched\r\n *\r\n * @internal\r\n */\r\nconst matchedRouteKey = /*#__PURE__*/ PolySymbol((process.env.NODE_ENV !== 'production') ? 'router view location matched' : 'rvlm');\r\n/**\r\n * Allows overriding the router view depth to control which component in\r\n * `matched` is rendered. rvd stands for Router View Depth\r\n *\r\n * @internal\r\n */\r\nconst viewDepthKey = /*#__PURE__*/ PolySymbol((process.env.NODE_ENV !== 'production') ? 'router view depth' : 'rvd');\r\n/**\r\n * Allows overriding the router instance returned by `useRouter` in tests. r\r\n * stands for router\r\n *\r\n * @internal\r\n */\r\nconst routerKey = /*#__PURE__*/ PolySymbol((process.env.NODE_ENV !== 'production') ? 'router' : 'r');\r\n/**\r\n * Allows overriding the current route returned by `useRoute` in tests. rl\r\n * stands for route location\r\n *\r\n * @internal\r\n */\r\nconst routeLocationKey = /*#__PURE__*/ PolySymbol((process.env.NODE_ENV !== 'production') ? 'route location' : 'rl');\r\n/**\r\n * Allows overriding the current route used by router-view. Internally this is\r\n * used when the `route` prop is passed.\r\n *\r\n * @internal\r\n */\r\nconst routerViewLocationKey = /*#__PURE__*/ PolySymbol((process.env.NODE_ENV !== 'production') ? 'router view location' : 'rvl');\n\nconst isBrowser = typeof window !== 'undefined';\n\nfunction isESModule(obj) {\r\n    return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module');\r\n}\r\nconst assign = Object.assign;\r\nfunction applyToParams(fn, params) {\r\n    const newParams = {};\r\n    for (const key in params) {\r\n        const value = params[key];\r\n        newParams[key] = Array.isArray(value) ? value.map(fn) : fn(value);\r\n    }\r\n    return newParams;\r\n}\r\nconst noop = () => { };\n\nfunction warn(msg) {\r\n    // avoid using ...args as it breaks in older Edge builds\r\n    const args = Array.from(arguments).slice(1);\r\n    console.warn.apply(console, ['[Vue Router warn]: ' + msg].concat(args));\r\n}\n\nconst TRAILING_SLASH_RE = /\\/$/;\r\nconst removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, '');\r\n/**\r\n * Transforms an URI into a normalized history location\r\n *\r\n * @param parseQuery\r\n * @param location - URI to normalize\r\n * @param currentLocation - current absolute location. Allows resolving relative\r\n * paths. Must start with `/`. Defaults to `/`\r\n * @returns a normalized history location\r\n */\r\nfunction parseURL(parseQuery, location, currentLocation = '/') {\r\n    let path, query = {}, searchString = '', hash = '';\r\n    // Could use URL and URLSearchParams but IE 11 doesn't support it\r\n    const searchPos = location.indexOf('?');\r\n    const hashPos = location.indexOf('#', searchPos > -1 ? searchPos : 0);\r\n    if (searchPos > -1) {\r\n        path = location.slice(0, searchPos);\r\n        searchString = location.slice(searchPos + 1, hashPos > -1 ? hashPos : location.length);\r\n        query = parseQuery(searchString);\r\n    }\r\n    if (hashPos > -1) {\r\n        path = path || location.slice(0, hashPos);\r\n        // keep the # character\r\n        hash = location.slice(hashPos, location.length);\r\n    }\r\n    // no search and no query\r\n    path = resolveRelativePath(path != null ? path : location, currentLocation);\r\n    // empty path means a relative query or hash `?foo=f`, `#thing`\r\n    return {\r\n        fullPath: path + (searchString && '?') + searchString + hash,\r\n        path,\r\n        query,\r\n        hash,\r\n    };\r\n}\r\n/**\r\n * Stringifies a URL object\r\n *\r\n * @param stringifyQuery\r\n * @param location\r\n */\r\nfunction stringifyURL(stringifyQuery, location) {\r\n    const query = location.query ? stringifyQuery(location.query) : '';\r\n    return location.path + (query && '?') + query + (location.hash || '');\r\n}\r\n/**\r\n * Strips off the base from the beginning of a location.pathname in a non\r\n * case-sensitive way.\r\n *\r\n * @param pathname - location.pathname\r\n * @param base - base to strip off\r\n */\r\nfunction stripBase(pathname, base) {\r\n    // no base or base is not found at the beginning\r\n    if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))\r\n        return pathname;\r\n    return pathname.slice(base.length) || '/';\r\n}\r\n/**\r\n * Checks if two RouteLocation are equal. This means that both locations are\r\n * pointing towards the same {@link RouteRecord} and that all `params`, `query`\r\n * parameters and `hash` are the same\r\n *\r\n * @param a - first {@link RouteLocation}\r\n * @param b - second {@link RouteLocation}\r\n */\r\nfunction isSameRouteLocation(stringifyQuery, a, b) {\r\n    const aLastIndex = a.matched.length - 1;\r\n    const bLastIndex = b.matched.length - 1;\r\n    return (aLastIndex > -1 &&\r\n        aLastIndex === bLastIndex &&\r\n        isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) &&\r\n        isSameRouteLocationParams(a.params, b.params) &&\r\n        stringifyQuery(a.query) === stringifyQuery(b.query) &&\r\n        a.hash === b.hash);\r\n}\r\n/**\r\n * Check if two `RouteRecords` are equal. Takes into account aliases: they are\r\n * considered equal to the `RouteRecord` they are aliasing.\r\n *\r\n * @param a - first {@link RouteRecord}\r\n * @param b - second {@link RouteRecord}\r\n */\r\nfunction isSameRouteRecord(a, b) {\r\n    // since the original record has an undefined value for aliasOf\r\n    // but all aliases point to the original record, this will always compare\r\n    // the original record\r\n    return (a.aliasOf || a) === (b.aliasOf || b);\r\n}\r\nfunction isSameRouteLocationParams(a, b) {\r\n    if (Object.keys(a).length !== Object.keys(b).length)\r\n        return false;\r\n    for (const key in a) {\r\n        if (!isSameRouteLocationParamsValue(a[key], b[key]))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nfunction isSameRouteLocationParamsValue(a, b) {\r\n    return Array.isArray(a)\r\n        ? isEquivalentArray(a, b)\r\n        : Array.isArray(b)\r\n            ? isEquivalentArray(b, a)\r\n            : a === b;\r\n}\r\n/**\r\n * Check if two arrays are the same or if an array with one single entry is the\r\n * same as another primitive value. Used to check query and parameters\r\n *\r\n * @param a - array of values\r\n * @param b - array of values or a single value\r\n */\r\nfunction isEquivalentArray(a, b) {\r\n    return Array.isArray(b)\r\n        ? a.length === b.length && a.every((value, i) => value === b[i])\r\n        : a.length === 1 && a[0] === b;\r\n}\r\n/**\r\n * Resolves a relative path that starts with `.`.\r\n *\r\n * @param to - path location we are resolving\r\n * @param from - currentLocation.path, should start with `/`\r\n */\r\nfunction resolveRelativePath(to, from) {\r\n    if (to.startsWith('/'))\r\n        return to;\r\n    if ((process.env.NODE_ENV !== 'production') && !from.startsWith('/')) {\r\n        warn(`Cannot resolve a relative location without an absolute path. Trying to resolve \"${to}\" from \"${from}\". It should look like \"/${from}\".`);\r\n        return to;\r\n    }\r\n    if (!to)\r\n        return from;\r\n    const fromSegments = from.split('/');\r\n    const toSegments = to.split('/');\r\n    let position = fromSegments.length - 1;\r\n    let toPosition;\r\n    let segment;\r\n    for (toPosition = 0; toPosition < toSegments.length; toPosition++) {\r\n        segment = toSegments[toPosition];\r\n        // can't go below zero\r\n        if (position === 1 || segment === '.')\r\n            continue;\r\n        if (segment === '..')\r\n            position--;\r\n        // found something that is not relative path\r\n        else\r\n            break;\r\n    }\r\n    return (fromSegments.slice(0, position).join('/') +\r\n        '/' +\r\n        toSegments\r\n            .slice(toPosition - (toPosition === toSegments.length ? 1 : 0))\r\n            .join('/'));\r\n}\n\nvar NavigationType;\r\n(function (NavigationType) {\r\n    NavigationType[\"pop\"] = \"pop\";\r\n    NavigationType[\"push\"] = \"push\";\r\n})(NavigationType || (NavigationType = {}));\r\nvar NavigationDirection;\r\n(function (NavigationDirection) {\r\n    NavigationDirection[\"back\"] = \"back\";\r\n    NavigationDirection[\"forward\"] = \"forward\";\r\n    NavigationDirection[\"unknown\"] = \"\";\r\n})(NavigationDirection || (NavigationDirection = {}));\r\n/**\r\n * Starting location for Histories\r\n */\r\nconst START = '';\r\n// Generic utils\r\n/**\r\n * Normalizes a base by removing any trailing slash and reading the base tag if\r\n * present.\r\n *\r\n * @param base - base to normalize\r\n */\r\nfunction normalizeBase(base) {\r\n    if (!base) {\r\n        if (isBrowser) {\r\n            // respect <base> tag\r\n            const baseEl = document.querySelector('base');\r\n            base = (baseEl && baseEl.getAttribute('href')) || '/';\r\n            // strip full URL origin\r\n            base = base.replace(/^\\w+:\\/\\/[^\\/]+/, '');\r\n        }\r\n        else {\r\n            base = '/';\r\n        }\r\n    }\r\n    // ensure leading slash when it was removed by the regex above avoid leading\r\n    // slash with hash because the file could be read from the disk like file://\r\n    // and the leading slash would cause problems\r\n    if (base[0] !== '/' && base[0] !== '#')\r\n        base = '/' + base;\r\n    // remove the trailing slash so all other method can just do `base + fullPath`\r\n    // to build an href\r\n    return removeTrailingSlash(base);\r\n}\r\n// remove any character before the hash\r\nconst BEFORE_HASH_RE = /^[^#]+#/;\r\nfunction createHref(base, location) {\r\n    return base.replace(BEFORE_HASH_RE, '#') + location;\r\n}\n\nfunction getElementPosition(el, offset) {\r\n    const docRect = document.documentElement.getBoundingClientRect();\r\n    const elRect = el.getBoundingClientRect();\r\n    return {\r\n        behavior: offset.behavior,\r\n        left: elRect.left - docRect.left - (offset.left || 0),\r\n        top: elRect.top - docRect.top - (offset.top || 0),\r\n    };\r\n}\r\nconst computeScrollPosition = () => ({\r\n    left: window.pageXOffset,\r\n    top: window.pageYOffset,\r\n});\r\nfunction scrollToPosition(position) {\r\n    let scrollToOptions;\r\n    if ('el' in position) {\r\n        const positionEl = position.el;\r\n        const isIdSelector = typeof positionEl === 'string' && positionEl.startsWith('#');\r\n        /**\r\n         * `id`s can accept pretty much any characters, including CSS combinators\r\n         * like `>` or `~`. It's still possible to retrieve elements using\r\n         * `document.getElementById('~')` but it needs to be escaped when using\r\n         * `document.querySelector('#\\\\~')` for it to be valid. The only\r\n         * requirements for `id`s are them to be unique on the page and to not be\r\n         * empty (`id=\"\"`). Because of that, when passing an id selector, it should\r\n         * be properly escaped for it to work with `querySelector`. We could check\r\n         * for the id selector to be simple (no CSS combinators `+ >~`) but that\r\n         * would make things inconsistent since they are valid characters for an\r\n         * `id` but would need to be escaped when using `querySelector`, breaking\r\n         * their usage and ending up in no selector returned. Selectors need to be\r\n         * escaped:\r\n         *\r\n         * - `#1-thing` becomes `#\\31 -thing`\r\n         * - `#with~symbols` becomes `#with\\\\~symbols`\r\n         *\r\n         * - More information about  the topic can be found at\r\n         *   https://mathiasbynens.be/notes/html5-id-class.\r\n         * - Practical example: https://mathiasbynens.be/demo/html5-id\r\n         */\r\n        if ((process.env.NODE_ENV !== 'production') && typeof position.el === 'string') {\r\n            if (!isIdSelector || !document.getElementById(position.el.slice(1))) {\r\n                try {\r\n                    const foundEl = document.querySelector(position.el);\r\n                    if (isIdSelector && foundEl) {\r\n                        warn(`The selector \"${position.el}\" should be passed as \"el: document.querySelector('${position.el}')\" because it starts with \"#\".`);\r\n                        // return to avoid other warnings\r\n                        return;\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    warn(`The selector \"${position.el}\" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);\r\n                    // return to avoid other warnings\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        const el = typeof positionEl === 'string'\r\n            ? isIdSelector\r\n                ? document.getElementById(positionEl.slice(1))\r\n                : document.querySelector(positionEl)\r\n            : positionEl;\r\n        if (!el) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Couldn't find element using selector \"${position.el}\" returned by scrollBehavior.`);\r\n            return;\r\n        }\r\n        scrollToOptions = getElementPosition(el, position);\r\n    }\r\n    else {\r\n        scrollToOptions = position;\r\n    }\r\n    if ('scrollBehavior' in document.documentElement.style)\r\n        window.scrollTo(scrollToOptions);\r\n    else {\r\n        window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);\r\n    }\r\n}\r\nfunction getScrollKey(path, delta) {\r\n    const position = history.state ? history.state.position - delta : -1;\r\n    return position + path;\r\n}\r\nconst scrollPositions = new Map();\r\nfunction saveScrollPosition(key, scrollPosition) {\r\n    scrollPositions.set(key, scrollPosition);\r\n}\r\nfunction getSavedScrollPosition(key) {\r\n    const scroll = scrollPositions.get(key);\r\n    // consume it so it's not used again\r\n    scrollPositions.delete(key);\r\n    return scroll;\r\n}\r\n// TODO: RFC about how to save scroll position\r\n/**\r\n * ScrollBehavior instance used by the router to compute and restore the scroll\r\n * position when navigating.\r\n */\r\n// export interface ScrollHandler<ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry> {\r\n//   // returns a scroll position that can be saved in history\r\n//   compute(): ScrollPositionEntry\r\n//   // can take an extended ScrollPositionEntry\r\n//   scroll(position: ScrollPosition): void\r\n// }\r\n// export const scrollHandler: ScrollHandler<ScrollPosition> = {\r\n//   compute: computeScroll,\r\n//   scroll: scrollToPosition,\r\n// }\n\nlet createBaseLocation = () => location.protocol + '//' + location.host;\r\n/**\r\n * Creates a normalized history location from a window.location object\r\n * @param location -\r\n */\r\nfunction createCurrentLocation(base, location) {\r\n    const { pathname, search, hash } = location;\r\n    // allows hash bases like #, /#, #/, #!, #!/, /#!/, or even /folder#end\r\n    const hashPos = base.indexOf('#');\r\n    if (hashPos > -1) {\r\n        let slicePos = hash.includes(base.slice(hashPos))\r\n            ? base.slice(hashPos).length\r\n            : 1;\r\n        let pathFromHash = hash.slice(slicePos);\r\n        // prepend the starting slash to hash so the url starts with /#\r\n        if (pathFromHash[0] !== '/')\r\n            pathFromHash = '/' + pathFromHash;\r\n        return stripBase(pathFromHash, '');\r\n    }\r\n    const path = stripBase(pathname, base);\r\n    return path + search + hash;\r\n}\r\nfunction useHistoryListeners(base, historyState, currentLocation, replace) {\r\n    let listeners = [];\r\n    let teardowns = [];\r\n    // TODO: should it be a stack? a Dict. Check if the popstate listener\r\n    // can trigger twice\r\n    let pauseState = null;\r\n    const popStateHandler = ({ state, }) => {\r\n        const to = createCurrentLocation(base, location);\r\n        const from = currentLocation.value;\r\n        const fromState = historyState.value;\r\n        let delta = 0;\r\n        if (state) {\r\n            currentLocation.value = to;\r\n            historyState.value = state;\r\n            // ignore the popstate and reset the pauseState\r\n            if (pauseState && pauseState === from) {\r\n                pauseState = null;\r\n                return;\r\n            }\r\n            delta = fromState ? state.position - fromState.position : 0;\r\n        }\r\n        else {\r\n            replace(to);\r\n        }\r\n        // console.log({ deltaFromCurrent })\r\n        // Here we could also revert the navigation by calling history.go(-delta)\r\n        // this listener will have to be adapted to not trigger again and to wait for the url\r\n        // to be updated before triggering the listeners. Some kind of validation function would also\r\n        // need to be passed to the listeners so the navigation can be accepted\r\n        // call all listeners\r\n        listeners.forEach(listener => {\r\n            listener(currentLocation.value, from, {\r\n                delta,\r\n                type: NavigationType.pop,\r\n                direction: delta\r\n                    ? delta > 0\r\n                        ? NavigationDirection.forward\r\n                        : NavigationDirection.back\r\n                    : NavigationDirection.unknown,\r\n            });\r\n        });\r\n    };\r\n    function pauseListeners() {\r\n        pauseState = currentLocation.value;\r\n    }\r\n    function listen(callback) {\r\n        // setup the listener and prepare teardown callbacks\r\n        listeners.push(callback);\r\n        const teardown = () => {\r\n            const index = listeners.indexOf(callback);\r\n            if (index > -1)\r\n                listeners.splice(index, 1);\r\n        };\r\n        teardowns.push(teardown);\r\n        return teardown;\r\n    }\r\n    function beforeUnloadListener() {\r\n        const { history } = window;\r\n        if (!history.state)\r\n            return;\r\n        history.replaceState(assign({}, history.state, { scroll: computeScrollPosition() }), '');\r\n    }\r\n    function destroy() {\r\n        for (const teardown of teardowns)\r\n            teardown();\r\n        teardowns = [];\r\n        window.removeEventListener('popstate', popStateHandler);\r\n        window.removeEventListener('beforeunload', beforeUnloadListener);\r\n    }\r\n    // setup the listeners and prepare teardown callbacks\r\n    window.addEventListener('popstate', popStateHandler);\r\n    window.addEventListener('beforeunload', beforeUnloadListener);\r\n    return {\r\n        pauseListeners,\r\n        listen,\r\n        destroy,\r\n    };\r\n}\r\n/**\r\n * Creates a state object\r\n */\r\nfunction buildState(back, current, forward, replaced = false, computeScroll = false) {\r\n    return {\r\n        back,\r\n        current,\r\n        forward,\r\n        replaced,\r\n        position: window.history.length,\r\n        scroll: computeScroll ? computeScrollPosition() : null,\r\n    };\r\n}\r\nfunction useHistoryStateNavigation(base) {\r\n    const { history, location } = window;\r\n    // private variables\r\n    const currentLocation = {\r\n        value: createCurrentLocation(base, location),\r\n    };\r\n    const historyState = { value: history.state };\r\n    // build current history entry as this is a fresh navigation\r\n    if (!historyState.value) {\r\n        changeLocation(currentLocation.value, {\r\n            back: null,\r\n            current: currentLocation.value,\r\n            forward: null,\r\n            // the length is off by one, we need to decrease it\r\n            position: history.length - 1,\r\n            replaced: true,\r\n            // don't add a scroll as the user may have an anchor and we want\r\n            // scrollBehavior to be triggered without a saved position\r\n            scroll: null,\r\n        }, true);\r\n    }\r\n    function changeLocation(to, state, replace) {\r\n        /**\r\n         * if a base tag is provided and we are on a normal domain, we have to\r\n         * respect the provided `base` attribute because pushState() will use it and\r\n         * potentially erase anything before the `#` like at\r\n         * https://github.com/vuejs/vue-router-next/issues/685 where a base of\r\n         * `/folder/#` but a base of `/` would erase the `/folder/` section. If\r\n         * there is no host, the `<base>` tag makes no sense and if there isn't a\r\n         * base tag we can just use everything after the `#`.\r\n         */\r\n        const hashIndex = base.indexOf('#');\r\n        const url = hashIndex > -1\r\n            ? (location.host && document.querySelector('base')\r\n                ? base\r\n                : base.slice(hashIndex)) + to\r\n            : createBaseLocation() + base + to;\r\n        try {\r\n            // BROWSER QUIRK\r\n            // NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds\r\n            history[replace ? 'replaceState' : 'pushState'](state, '', url);\r\n            historyState.value = state;\r\n        }\r\n        catch (err) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                warn('Error with push/replace State', err);\r\n            }\r\n            else {\r\n                console.error(err);\r\n            }\r\n            // Force the navigation, this also resets the call count\r\n            location[replace ? 'replace' : 'assign'](url);\r\n        }\r\n    }\r\n    function replace(to, data) {\r\n        const state = assign({}, history.state, buildState(historyState.value.back, \r\n        // keep back and forward entries but override current position\r\n        to, historyState.value.forward, true), data, { position: historyState.value.position });\r\n        changeLocation(to, state, true);\r\n        currentLocation.value = to;\r\n    }\r\n    function push(to, data) {\r\n        // Add to current entry the information of where we are going\r\n        // as well as saving the current position\r\n        const currentState = assign({}, \r\n        // use current history state to gracefully handle a wrong call to\r\n        // history.replaceState\r\n        // https://github.com/vuejs/vue-router-next/issues/366\r\n        historyState.value, history.state, {\r\n            forward: to,\r\n            scroll: computeScrollPosition(),\r\n        });\r\n        if ((process.env.NODE_ENV !== 'production') && !history.state) {\r\n            warn(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n` +\r\n                `history.replaceState(history.state, '', url)\\n\\n` +\r\n                `You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`);\r\n        }\r\n        changeLocation(currentState.current, currentState, true);\r\n        const state = assign({}, buildState(currentLocation.value, to, null), { position: currentState.position + 1 }, data);\r\n        changeLocation(to, state, false);\r\n        currentLocation.value = to;\r\n    }\r\n    return {\r\n        location: currentLocation,\r\n        state: historyState,\r\n        push,\r\n        replace,\r\n    };\r\n}\r\n/**\r\n * Creates an HTML5 history. Most common history for single page applications.\r\n *\r\n * @param base -\r\n */\r\nfunction createWebHistory(base) {\r\n    base = normalizeBase(base);\r\n    const historyNavigation = useHistoryStateNavigation(base);\r\n    const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);\r\n    function go(delta, triggerListeners = true) {\r\n        if (!triggerListeners)\r\n            historyListeners.pauseListeners();\r\n        history.go(delta);\r\n    }\r\n    const routerHistory = assign({\r\n        // it's overridden right after\r\n        location: '',\r\n        base,\r\n        go,\r\n        createHref: createHref.bind(null, base),\r\n    }, historyNavigation, historyListeners);\r\n    Object.defineProperty(routerHistory, 'location', {\r\n        enumerable: true,\r\n        get: () => historyNavigation.location.value,\r\n    });\r\n    Object.defineProperty(routerHistory, 'state', {\r\n        enumerable: true,\r\n        get: () => historyNavigation.state.value,\r\n    });\r\n    return routerHistory;\r\n}\n\n/**\r\n * Creates a in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.\r\n * It's up to the user to replace that location with the starter location by either calling `router.push` or `router.replace`.\r\n *\r\n * @param base - Base applied to all urls, defaults to '/'\r\n * @returns a history object that can be passed to the router constructor\r\n */\r\nfunction createMemoryHistory(base = '') {\r\n    let listeners = [];\r\n    let queue = [START];\r\n    let position = 0;\r\n    function setLocation(location) {\r\n        position++;\r\n        if (position === queue.length) {\r\n            // we are at the end, we can simply append a new entry\r\n            queue.push(location);\r\n        }\r\n        else {\r\n            // we are in the middle, we remove everything from here in the queue\r\n            queue.splice(position);\r\n            queue.push(location);\r\n        }\r\n    }\r\n    function triggerListeners(to, from, { direction, delta }) {\r\n        const info = {\r\n            direction,\r\n            delta,\r\n            type: NavigationType.pop,\r\n        };\r\n        for (const callback of listeners) {\r\n            callback(to, from, info);\r\n        }\r\n    }\r\n    const routerHistory = {\r\n        // rewritten by Object.defineProperty\r\n        location: START,\r\n        // TODO: should be kept in queue\r\n        state: {},\r\n        base,\r\n        createHref: createHref.bind(null, base),\r\n        replace(to) {\r\n            // remove current entry and decrement position\r\n            queue.splice(position--, 1);\r\n            setLocation(to);\r\n        },\r\n        push(to, data) {\r\n            setLocation(to);\r\n        },\r\n        listen(callback) {\r\n            listeners.push(callback);\r\n            return () => {\r\n                const index = listeners.indexOf(callback);\r\n                if (index > -1)\r\n                    listeners.splice(index, 1);\r\n            };\r\n        },\r\n        destroy() {\r\n            listeners = [];\r\n            queue = [START];\r\n            position = 0;\r\n        },\r\n        go(delta, shouldTrigger = true) {\r\n            const from = this.location;\r\n            const direction = \r\n            // we are considering delta === 0 going forward, but in abstract mode\r\n            // using 0 for the delta doesn't make sense like it does in html5 where\r\n            // it reloads the page\r\n            delta < 0 ? NavigationDirection.back : NavigationDirection.forward;\r\n            position = Math.max(0, Math.min(position + delta, queue.length - 1));\r\n            if (shouldTrigger) {\r\n                triggerListeners(this.location, from, {\r\n                    direction,\r\n                    delta,\r\n                });\r\n            }\r\n        },\r\n    };\r\n    Object.defineProperty(routerHistory, 'location', {\r\n        enumerable: true,\r\n        get: () => queue[position],\r\n    });\r\n    return routerHistory;\r\n}\n\n/**\r\n * Creates a hash history. Useful for web applications with no host (e.g.\r\n * `file://`) or when configuring a server to handle any URL is not possible.\r\n *\r\n * @param base - optional base to provide. Defaults to `location.pathname +\r\n * location.search` If there is a `<base>` tag in the `head`, its value will be\r\n * ignored in favor of this parameter **but note it affects all the\r\n * history.pushState() calls**, meaning that if you use a `<base>` tag, it's\r\n * `href` value **has to match this parameter** (ignoring anything after the\r\n * `#`).\r\n *\r\n * @example\r\n * ```js\r\n * // at https://example.com/folder\r\n * createWebHashHistory() // gives a url of `https://example.com/folder#`\r\n * createWebHashHistory('/folder/') // gives a url of `https://example.com/folder/#`\r\n * // if the `#` is provided in the base, it won't be added by `createWebHashHistory`\r\n * createWebHashHistory('/folder/#/app/') // gives a url of `https://example.com/folder/#/app/`\r\n * // you should avoid doing this because it changes the original url and breaks copying urls\r\n * createWebHashHistory('/other-folder/') // gives a url of `https://example.com/other-folder/#`\r\n *\r\n * // at file:///usr/etc/folder/index.html\r\n * // for locations with no `host`, the base is ignored\r\n * createWebHashHistory('/iAmIgnored') // gives a url of `file:///usr/etc/folder/index.html#`\r\n * ```\r\n */\r\nfunction createWebHashHistory(base) {\r\n    // Make sure this implementation is fine in terms of encoding, specially for IE11\r\n    // for `file://`, directly use the pathname and ignore the base\r\n    // location.pathname contains an initial `/` even at the root: `https://example.com`\r\n    base = location.host ? base || location.pathname + location.search : '';\r\n    // allow the user to provide a `#` in the middle: `/base/#/app`\r\n    if (!base.includes('#'))\r\n        base += '#';\r\n    if ((process.env.NODE_ENV !== 'production') && !base.endsWith('#/') && !base.endsWith('#')) {\r\n        warn(`A hash base must end with a \"#\":\\n\"${base}\" should be \"${base.replace(/#.*$/, '#')}\".`);\r\n    }\r\n    return createWebHistory(base);\r\n}\n\nfunction isRouteLocation(route) {\r\n    return typeof route === 'string' || (route && typeof route === 'object');\r\n}\r\nfunction isRouteName(name) {\r\n    return typeof name === 'string' || typeof name === 'symbol';\r\n}\n\n/**\r\n * Initial route location where the router is. Can be used in navigation guards\r\n * to differentiate the initial navigation.\r\n *\r\n * @example\r\n * ```js\r\n * import { START_LOCATION } from 'vue-router'\r\n *\r\n * router.beforeEach((to, from) => {\r\n *   if (from === START_LOCATION) {\r\n *     // initial navigation\r\n *   }\r\n * })\r\n * ```\r\n */\r\nconst START_LOCATION_NORMALIZED = {\r\n    path: '/',\r\n    name: undefined,\r\n    params: {},\r\n    query: {},\r\n    hash: '',\r\n    fullPath: '/',\r\n    matched: [],\r\n    meta: {},\r\n    redirectedFrom: undefined,\r\n};\n\nconst NavigationFailureSymbol = /*#__PURE__*/ PolySymbol((process.env.NODE_ENV !== 'production') ? 'navigation failure' : 'nf');\r\n/**\r\n * Enumeration with all possible types for navigation failures. Can be passed to\r\n * {@link isNavigationFailure} to check for specific failures.\r\n */\r\nvar NavigationFailureType;\r\n(function (NavigationFailureType) {\r\n    /**\r\n     * An aborted navigation is a navigation that failed because a navigation\r\n     * guard returned `false` or called `next(false)`\r\n     */\r\n    NavigationFailureType[NavigationFailureType[\"aborted\"] = 4] = \"aborted\";\r\n    /**\r\n     * A cancelled navigation is a navigation that failed because a more recent\r\n     * navigation finished started (not necessarily finished).\r\n     */\r\n    NavigationFailureType[NavigationFailureType[\"cancelled\"] = 8] = \"cancelled\";\r\n    /**\r\n     * A duplicated navigation is a navigation that failed because it was\r\n     * initiated while already being at the exact same location.\r\n     */\r\n    NavigationFailureType[NavigationFailureType[\"duplicated\"] = 16] = \"duplicated\";\r\n})(NavigationFailureType || (NavigationFailureType = {}));\r\n// DEV only debug messages\r\nconst ErrorTypeMessages = {\r\n    [1 /* MATCHER_NOT_FOUND */]({ location, currentLocation }) {\r\n        return `No match for\\n ${JSON.stringify(location)}${currentLocation\r\n            ? '\\nwhile being at\\n' + JSON.stringify(currentLocation)\r\n            : ''}`;\r\n    },\r\n    [2 /* NAVIGATION_GUARD_REDIRECT */]({ from, to, }) {\r\n        return `Redirected from \"${from.fullPath}\" to \"${stringifyRoute(to)}\" via a navigation guard.`;\r\n    },\r\n    [4 /* NAVIGATION_ABORTED */]({ from, to }) {\r\n        return `Navigation aborted from \"${from.fullPath}\" to \"${to.fullPath}\" via a navigation guard.`;\r\n    },\r\n    [8 /* NAVIGATION_CANCELLED */]({ from, to }) {\r\n        return `Navigation cancelled from \"${from.fullPath}\" to \"${to.fullPath}\" with a new navigation.`;\r\n    },\r\n    [16 /* NAVIGATION_DUPLICATED */]({ from, to }) {\r\n        return `Avoided redundant navigation to current location: \"${from.fullPath}\".`;\r\n    },\r\n};\r\nfunction createRouterError(type, params) {\r\n    // keep full error messages in cjs versions\r\n    if ((process.env.NODE_ENV !== 'production') || !true) {\r\n        return assign(new Error(ErrorTypeMessages[type](params)), {\r\n            type,\r\n            [NavigationFailureSymbol]: true,\r\n        }, params);\r\n    }\r\n    else {\r\n        return assign(new Error(), {\r\n            type,\r\n            [NavigationFailureSymbol]: true,\r\n        }, params);\r\n    }\r\n}\r\nfunction isNavigationFailure(error, type) {\r\n    return (error instanceof Error &&\r\n        NavigationFailureSymbol in error &&\r\n        (type == null || !!(error.type & type)));\r\n}\r\nconst propertiesToLog = ['params', 'query', 'hash'];\r\nfunction stringifyRoute(to) {\r\n    if (typeof to === 'string')\r\n        return to;\r\n    if ('path' in to)\r\n        return to.path;\r\n    const location = {};\r\n    for (const key of propertiesToLog) {\r\n        if (key in to)\r\n            location[key] = to[key];\r\n    }\r\n    return JSON.stringify(location, null, 2);\r\n}\n\n// default pattern for a param: non greedy everything but /\r\nconst BASE_PARAM_PATTERN = '[^/]+?';\r\nconst BASE_PATH_PARSER_OPTIONS = {\r\n    sensitive: false,\r\n    strict: false,\r\n    start: true,\r\n    end: true,\r\n};\r\n// Special Regex characters that must be escaped in static tokens\r\nconst REGEX_CHARS_RE = /[.+*?^${}()[\\]/\\\\]/g;\r\n/**\r\n * Creates a path parser from an array of Segments (a segment is an array of Tokens)\r\n *\r\n * @param segments - array of segments returned by tokenizePath\r\n * @param extraOptions - optional options for the regexp\r\n * @returns a PathParser\r\n */\r\nfunction tokensToParser(segments, extraOptions) {\r\n    const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);\r\n    // the amount of scores is the same as the length of segments except for the root segment \"/\"\r\n    const score = [];\r\n    // the regexp as a string\r\n    let pattern = options.start ? '^' : '';\r\n    // extracted keys\r\n    const keys = [];\r\n    for (const segment of segments) {\r\n        // the root segment needs special treatment\r\n        const segmentScores = segment.length ? [] : [90 /* Root */];\r\n        // allow trailing slash\r\n        if (options.strict && !segment.length)\r\n            pattern += '/';\r\n        for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {\r\n            const token = segment[tokenIndex];\r\n            // resets the score if we are inside a sub segment /:a-other-:b\r\n            let subSegmentScore = 40 /* Segment */ +\r\n                (options.sensitive ? 0.25 /* BonusCaseSensitive */ : 0);\r\n            if (token.type === 0 /* Static */) {\r\n                // prepend the slash if we are starting a new segment\r\n                if (!tokenIndex)\r\n                    pattern += '/';\r\n                pattern += token.value.replace(REGEX_CHARS_RE, '\\\\$&');\r\n                subSegmentScore += 40 /* Static */;\r\n            }\r\n            else if (token.type === 1 /* Param */) {\r\n                const { value, repeatable, optional, regexp } = token;\r\n                keys.push({\r\n                    name: value,\r\n                    repeatable,\r\n                    optional,\r\n                });\r\n                const re = regexp ? regexp : BASE_PARAM_PATTERN;\r\n                // the user provided a custom regexp /:id(\\\\d+)\r\n                if (re !== BASE_PARAM_PATTERN) {\r\n                    subSegmentScore += 10 /* BonusCustomRegExp */;\r\n                    // make sure the regexp is valid before using it\r\n                    try {\r\n                        new RegExp(`(${re})`);\r\n                    }\r\n                    catch (err) {\r\n                        throw new Error(`Invalid custom RegExp for param \"${value}\" (${re}): ` +\r\n                            err.message);\r\n                    }\r\n                }\r\n                // when we repeat we must take care of the repeating leading slash\r\n                let subPattern = repeatable ? `((?:${re})(?:/(?:${re}))*)` : `(${re})`;\r\n                // prepend the slash if we are starting a new segment\r\n                if (!tokenIndex)\r\n                    subPattern =\r\n                        // avoid an optional / if there are more segments e.g. /:p?-static\r\n                        // or /:p?-:p2\r\n                        optional && segment.length < 2\r\n                            ? `(?:/${subPattern})`\r\n                            : '/' + subPattern;\r\n                if (optional)\r\n                    subPattern += '?';\r\n                pattern += subPattern;\r\n                subSegmentScore += 20 /* Dynamic */;\r\n                if (optional)\r\n                    subSegmentScore += -8 /* BonusOptional */;\r\n                if (repeatable)\r\n                    subSegmentScore += -20 /* BonusRepeatable */;\r\n                if (re === '.*')\r\n                    subSegmentScore += -50 /* BonusWildcard */;\r\n            }\r\n            segmentScores.push(subSegmentScore);\r\n        }\r\n        // an empty array like /home/ -> [[{home}], []]\r\n        // if (!segment.length) pattern += '/'\r\n        score.push(segmentScores);\r\n    }\r\n    // only apply the strict bonus to the last score\r\n    if (options.strict && options.end) {\r\n        const i = score.length - 1;\r\n        score[i][score[i].length - 1] += 0.7000000000000001 /* BonusStrict */;\r\n    }\r\n    // TODO: dev only warn double trailing slash\r\n    if (!options.strict)\r\n        pattern += '/?';\r\n    if (options.end)\r\n        pattern += '$';\r\n    // allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else\r\n    else if (options.strict)\r\n        pattern += '(?:/|$)';\r\n    const re = new RegExp(pattern, options.sensitive ? '' : 'i');\r\n    function parse(path) {\r\n        const match = path.match(re);\r\n        const params = {};\r\n        if (!match)\r\n            return null;\r\n        for (let i = 1; i < match.length; i++) {\r\n            const value = match[i] || '';\r\n            const key = keys[i - 1];\r\n            params[key.name] = value && key.repeatable ? value.split('/') : value;\r\n        }\r\n        return params;\r\n    }\r\n    function stringify(params) {\r\n        let path = '';\r\n        // for optional parameters to allow to be empty\r\n        let avoidDuplicatedSlash = false;\r\n        for (const segment of segments) {\r\n            if (!avoidDuplicatedSlash || !path.endsWith('/'))\r\n                path += '/';\r\n            avoidDuplicatedSlash = false;\r\n            for (const token of segment) {\r\n                if (token.type === 0 /* Static */) {\r\n                    path += token.value;\r\n                }\r\n                else if (token.type === 1 /* Param */) {\r\n                    const { value, repeatable, optional } = token;\r\n                    const param = value in params ? params[value] : '';\r\n                    if (Array.isArray(param) && !repeatable)\r\n                        throw new Error(`Provided param \"${value}\" is an array but it is not repeatable (* or + modifiers)`);\r\n                    const text = Array.isArray(param) ? param.join('/') : param;\r\n                    if (!text) {\r\n                        if (optional) {\r\n                            // if we have more than one optional param like /:a?-static we\r\n                            // don't need to care about the optional param\r\n                            if (segment.length < 2) {\r\n                                // remove the last slash as we could be at the end\r\n                                if (path.endsWith('/'))\r\n                                    path = path.slice(0, -1);\r\n                                // do not append a slash on the next iteration\r\n                                else\r\n                                    avoidDuplicatedSlash = true;\r\n                            }\r\n                        }\r\n                        else\r\n                            throw new Error(`Missing required param \"${value}\"`);\r\n                    }\r\n                    path += text;\r\n                }\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n    return {\r\n        re,\r\n        score,\r\n        keys,\r\n        parse,\r\n        stringify,\r\n    };\r\n}\r\n/**\r\n * Compares an array of numbers as used in PathParser.score and returns a\r\n * number. This function can be used to `sort` an array\r\n *\r\n * @param a - first array of numbers\r\n * @param b - second array of numbers\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n * should be sorted first\r\n */\r\nfunction compareScoreArray(a, b) {\r\n    let i = 0;\r\n    while (i < a.length && i < b.length) {\r\n        const diff = b[i] - a[i];\r\n        // only keep going if diff === 0\r\n        if (diff)\r\n            return diff;\r\n        i++;\r\n    }\r\n    // if the last subsegment was Static, the shorter segments should be sorted first\r\n    // otherwise sort the longest segment first\r\n    if (a.length < b.length) {\r\n        return a.length === 1 && a[0] === 40 /* Static */ + 40 /* Segment */\r\n            ? -1\r\n            : 1;\r\n    }\r\n    else if (a.length > b.length) {\r\n        return b.length === 1 && b[0] === 40 /* Static */ + 40 /* Segment */\r\n            ? 1\r\n            : -1;\r\n    }\r\n    return 0;\r\n}\r\n/**\r\n * Compare function that can be used with `sort` to sort an array of PathParser\r\n *\r\n * @param a - first PathParser\r\n * @param b - second PathParser\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n */\r\nfunction comparePathParserScore(a, b) {\r\n    let i = 0;\r\n    const aScore = a.score;\r\n    const bScore = b.score;\r\n    while (i < aScore.length && i < bScore.length) {\r\n        const comp = compareScoreArray(aScore[i], bScore[i]);\r\n        // do not return if both are equal\r\n        if (comp)\r\n            return comp;\r\n        i++;\r\n    }\r\n    // if a and b share the same score entries but b has more, sort b first\r\n    return bScore.length - aScore.length;\r\n    // this is the ternary version\r\n    // return aScore.length < bScore.length\r\n    //   ? 1\r\n    //   : aScore.length > bScore.length\r\n    //   ? -1\r\n    //   : 0\r\n}\n\nconst ROOT_TOKEN = {\r\n    type: 0 /* Static */,\r\n    value: '',\r\n};\r\nconst VALID_PARAM_RE = /[a-zA-Z0-9_]/;\r\n// After some profiling, the cache seems to be unnecessary because tokenizePath\r\n// (the slowest part of adding a route) is very fast\r\n// const tokenCache = new Map<string, Token[][]>()\r\nfunction tokenizePath(path) {\r\n    if (!path)\r\n        return [[]];\r\n    if (path === '/')\r\n        return [[ROOT_TOKEN]];\r\n    if (!path.startsWith('/')) {\r\n        throw new Error((process.env.NODE_ENV !== 'production')\r\n            ? `Route paths should start with a \"/\": \"${path}\" should be \"/${path}\".`\r\n            : `Invalid path \"${path}\"`);\r\n    }\r\n    // if (tokenCache.has(path)) return tokenCache.get(path)!\r\n    function crash(message) {\r\n        throw new Error(`ERR (${state})/\"${buffer}\": ${message}`);\r\n    }\r\n    let state = 0 /* Static */;\r\n    let previousState = state;\r\n    const tokens = [];\r\n    // the segment will always be valid because we get into the initial state\r\n    // with the leading /\r\n    let segment;\r\n    function finalizeSegment() {\r\n        if (segment)\r\n            tokens.push(segment);\r\n        segment = [];\r\n    }\r\n    // index on the path\r\n    let i = 0;\r\n    // char at index\r\n    let char;\r\n    // buffer of the value read\r\n    let buffer = '';\r\n    // custom regexp for a param\r\n    let customRe = '';\r\n    function consumeBuffer() {\r\n        if (!buffer)\r\n            return;\r\n        if (state === 0 /* Static */) {\r\n            segment.push({\r\n                type: 0 /* Static */,\r\n                value: buffer,\r\n            });\r\n        }\r\n        else if (state === 1 /* Param */ ||\r\n            state === 2 /* ParamRegExp */ ||\r\n            state === 3 /* ParamRegExpEnd */) {\r\n            if (segment.length > 1 && (char === '*' || char === '+'))\r\n                crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);\r\n            segment.push({\r\n                type: 1 /* Param */,\r\n                value: buffer,\r\n                regexp: customRe,\r\n                repeatable: char === '*' || char === '+',\r\n                optional: char === '*' || char === '?',\r\n            });\r\n        }\r\n        else {\r\n            crash('Invalid state to consume buffer');\r\n        }\r\n        buffer = '';\r\n    }\r\n    function addCharToBuffer() {\r\n        buffer += char;\r\n    }\r\n    while (i < path.length) {\r\n        char = path[i++];\r\n        if (char === '\\\\' && state !== 2 /* ParamRegExp */) {\r\n            previousState = state;\r\n            state = 4 /* EscapeNext */;\r\n            continue;\r\n        }\r\n        switch (state) {\r\n            case 0 /* Static */:\r\n                if (char === '/') {\r\n                    if (buffer) {\r\n                        consumeBuffer();\r\n                    }\r\n                    finalizeSegment();\r\n                }\r\n                else if (char === ':') {\r\n                    consumeBuffer();\r\n                    state = 1 /* Param */;\r\n                }\r\n                else {\r\n                    addCharToBuffer();\r\n                }\r\n                break;\r\n            case 4 /* EscapeNext */:\r\n                addCharToBuffer();\r\n                state = previousState;\r\n                break;\r\n            case 1 /* Param */:\r\n                if (char === '(') {\r\n                    state = 2 /* ParamRegExp */;\r\n                }\r\n                else if (VALID_PARAM_RE.test(char)) {\r\n                    addCharToBuffer();\r\n                }\r\n                else {\r\n                    consumeBuffer();\r\n                    state = 0 /* Static */;\r\n                    // go back one character if we were not modifying\r\n                    if (char !== '*' && char !== '?' && char !== '+')\r\n                        i--;\r\n                }\r\n                break;\r\n            case 2 /* ParamRegExp */:\r\n                // TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)\r\n                // it already works by escaping the closing )\r\n                // https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#\r\n                // is this really something people need since you can also write\r\n                // /prefix_:p()_suffix\r\n                if (char === ')') {\r\n                    // handle the escaped )\r\n                    if (customRe[customRe.length - 1] == '\\\\')\r\n                        customRe = customRe.slice(0, -1) + char;\r\n                    else\r\n                        state = 3 /* ParamRegExpEnd */;\r\n                }\r\n                else {\r\n                    customRe += char;\r\n                }\r\n                break;\r\n            case 3 /* ParamRegExpEnd */:\r\n                // same as finalizing a param\r\n                consumeBuffer();\r\n                state = 0 /* Static */;\r\n                // go back one character if we were not modifying\r\n                if (char !== '*' && char !== '?' && char !== '+')\r\n                    i--;\r\n                customRe = '';\r\n                break;\r\n            default:\r\n                crash('Unknown state');\r\n                break;\r\n        }\r\n    }\r\n    if (state === 2 /* ParamRegExp */)\r\n        crash(`Unfinished custom RegExp for param \"${buffer}\"`);\r\n    consumeBuffer();\r\n    finalizeSegment();\r\n    // tokenCache.set(path, tokens)\r\n    return tokens;\r\n}\n\nfunction createRouteRecordMatcher(record, parent, options) {\r\n    const parser = tokensToParser(tokenizePath(record.path), options);\r\n    // warn against params with the same name\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const existingKeys = new Set();\r\n        for (const key of parser.keys) {\r\n            if (existingKeys.has(key.name))\r\n                warn(`Found duplicated params with name \"${key.name}\" for path \"${record.path}\". Only the last one will be available on \"$route.params\".`);\r\n            existingKeys.add(key.name);\r\n        }\r\n    }\r\n    const matcher = assign(parser, {\r\n        record,\r\n        parent,\r\n        // these needs to be populated by the parent\r\n        children: [],\r\n        alias: [],\r\n    });\r\n    if (parent) {\r\n        // both are aliases or both are not aliases\r\n        // we don't want to mix them because the order is used when\r\n        // passing originalRecord in Matcher.addRoute\r\n        if (!matcher.record.aliasOf === !parent.record.aliasOf)\r\n            parent.children.push(matcher);\r\n    }\r\n    return matcher;\r\n}\n\n/**\r\n * Creates a Router Matcher.\r\n *\r\n * @internal\r\n * @param routes - array of initial routes\r\n * @param globalOptions - global route options\r\n */\r\nfunction createRouterMatcher(routes, globalOptions) {\r\n    // normalized ordered array of matchers\r\n    const matchers = [];\r\n    const matcherMap = new Map();\r\n    globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);\r\n    function getRecordMatcher(name) {\r\n        return matcherMap.get(name);\r\n    }\r\n    function addRoute(record, parent, originalRecord) {\r\n        // used later on to remove by name\r\n        const isRootAdd = !originalRecord;\r\n        const mainNormalizedRecord = normalizeRouteRecord(record);\r\n        // we might be the child of an alias\r\n        mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;\r\n        const options = mergeOptions(globalOptions, record);\r\n        // generate an array of records to correctly handle aliases\r\n        const normalizedRecords = [\r\n            mainNormalizedRecord,\r\n        ];\r\n        if ('alias' in record) {\r\n            const aliases = typeof record.alias === 'string' ? [record.alias] : record.alias;\r\n            for (const alias of aliases) {\r\n                normalizedRecords.push(assign({}, mainNormalizedRecord, {\r\n                    // this allows us to hold a copy of the `components` option\r\n                    // so that async components cache is hold on the original record\r\n                    components: originalRecord\r\n                        ? originalRecord.record.components\r\n                        : mainNormalizedRecord.components,\r\n                    path: alias,\r\n                    // we might be the child of an alias\r\n                    aliasOf: originalRecord\r\n                        ? originalRecord.record\r\n                        : mainNormalizedRecord,\r\n                    // the aliases are always of the same kind as the original since they\r\n                    // are defined on the same record\r\n                }));\r\n            }\r\n        }\r\n        let matcher;\r\n        let originalMatcher;\r\n        for (const normalizedRecord of normalizedRecords) {\r\n            const { path } = normalizedRecord;\r\n            // Build up the path for nested routes if the child isn't an absolute\r\n            // route. Only add the / delimiter if the child path isn't empty and if the\r\n            // parent path doesn't have a trailing slash\r\n            if (parent && path[0] !== '/') {\r\n                const parentPath = parent.record.path;\r\n                const connectingSlash = parentPath[parentPath.length - 1] === '/' ? '' : '/';\r\n                normalizedRecord.path =\r\n                    parent.record.path + (path && connectingSlash + path);\r\n            }\r\n            if ((process.env.NODE_ENV !== 'production') && normalizedRecord.path === '*') {\r\n                throw new Error('Catch all routes (\"*\") must now be defined using a param with a custom regexp.\\n' +\r\n                    'See more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');\r\n            }\r\n            // create the object before hand so it can be passed to children\r\n            matcher = createRouteRecordMatcher(normalizedRecord, parent, options);\r\n            if ((process.env.NODE_ENV !== 'production') && parent && path[0] === '/')\r\n                checkMissingParamsInAbsolutePath(matcher, parent);\r\n            // if we are an alias we must tell the original record that we exist\r\n            // so we can be removed\r\n            if (originalRecord) {\r\n                originalRecord.alias.push(matcher);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkSameParams(originalRecord, matcher);\r\n                }\r\n            }\r\n            else {\r\n                // otherwise, the first record is the original and others are aliases\r\n                originalMatcher = originalMatcher || matcher;\r\n                if (originalMatcher !== matcher)\r\n                    originalMatcher.alias.push(matcher);\r\n                // remove the route if named and only for the top record (avoid in nested calls)\r\n                // this works because the original record is the first one\r\n                if (isRootAdd && record.name && !isAliasRecord(matcher))\r\n                    removeRoute(record.name);\r\n            }\r\n            if ('children' in mainNormalizedRecord) {\r\n                const children = mainNormalizedRecord.children;\r\n                for (let i = 0; i < children.length; i++) {\r\n                    addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);\r\n                }\r\n            }\r\n            // if there was no original record, then the first one was not an alias and all\r\n            // other alias (if any) need to reference this record when adding children\r\n            originalRecord = originalRecord || matcher;\r\n            // TODO: add normalized records for more flexibility\r\n            // if (parent && isAliasRecord(originalRecord)) {\r\n            //   parent.children.push(originalRecord)\r\n            // }\r\n            insertMatcher(matcher);\r\n        }\r\n        return originalMatcher\r\n            ? () => {\r\n                // since other matchers are aliases, they should be removed by the original matcher\r\n                removeRoute(originalMatcher);\r\n            }\r\n            : noop;\r\n    }\r\n    function removeRoute(matcherRef) {\r\n        if (isRouteName(matcherRef)) {\r\n            const matcher = matcherMap.get(matcherRef);\r\n            if (matcher) {\r\n                matcherMap.delete(matcherRef);\r\n                matchers.splice(matchers.indexOf(matcher), 1);\r\n                matcher.children.forEach(removeRoute);\r\n                matcher.alias.forEach(removeRoute);\r\n            }\r\n        }\r\n        else {\r\n            const index = matchers.indexOf(matcherRef);\r\n            if (index > -1) {\r\n                matchers.splice(index, 1);\r\n                if (matcherRef.record.name)\r\n                    matcherMap.delete(matcherRef.record.name);\r\n                matcherRef.children.forEach(removeRoute);\r\n                matcherRef.alias.forEach(removeRoute);\r\n            }\r\n        }\r\n    }\r\n    function getRoutes() {\r\n        return matchers;\r\n    }\r\n    function insertMatcher(matcher) {\r\n        let i = 0;\r\n        // console.log('i is', { i })\r\n        while (i < matchers.length &&\r\n            comparePathParserScore(matcher, matchers[i]) >= 0)\r\n            i++;\r\n        // console.log('END i is', { i })\r\n        // while (i < matchers.length && matcher.score <= matchers[i].score) i++\r\n        matchers.splice(i, 0, matcher);\r\n        // only add the original record to the name map\r\n        if (matcher.record.name && !isAliasRecord(matcher))\r\n            matcherMap.set(matcher.record.name, matcher);\r\n    }\r\n    function resolve(location, currentLocation) {\r\n        let matcher;\r\n        let params = {};\r\n        let path;\r\n        let name;\r\n        if ('name' in location && location.name) {\r\n            matcher = matcherMap.get(location.name);\r\n            if (!matcher)\r\n                throw createRouterError(1 /* MATCHER_NOT_FOUND */, {\r\n                    location,\r\n                });\r\n            name = matcher.record.name;\r\n            params = assign(\r\n            // paramsFromLocation is a new object\r\n            paramsFromLocation(currentLocation.params, \r\n            // only keep params that exist in the resolved location\r\n            // TODO: only keep optional params coming from a parent record\r\n            matcher.keys.filter(k => !k.optional).map(k => k.name)), location.params);\r\n            // throws if cannot be stringified\r\n            path = matcher.stringify(params);\r\n        }\r\n        else if ('path' in location) {\r\n            // no need to resolve the path with the matcher as it was provided\r\n            // this also allows the user to control the encoding\r\n            path = location.path;\r\n            if ((process.env.NODE_ENV !== 'production') && !path.startsWith('/')) {\r\n                warn(`The Matcher cannot resolve relative paths but received \"${path}\". Unless you directly called \\`matcher.resolve(\"${path}\")\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-router-next.`);\r\n            }\r\n            matcher = matchers.find(m => m.re.test(path));\r\n            // matcher should have a value after the loop\r\n            if (matcher) {\r\n                // TODO: dev warning of unused params if provided\r\n                // we know the matcher works because we tested the regexp\r\n                params = matcher.parse(path);\r\n                name = matcher.record.name;\r\n            }\r\n            // location is a relative path\r\n        }\r\n        else {\r\n            // match by name or path of current route\r\n            matcher = currentLocation.name\r\n                ? matcherMap.get(currentLocation.name)\r\n                : matchers.find(m => m.re.test(currentLocation.path));\r\n            if (!matcher)\r\n                throw createRouterError(1 /* MATCHER_NOT_FOUND */, {\r\n                    location,\r\n                    currentLocation,\r\n                });\r\n            name = matcher.record.name;\r\n            // since we are navigating to the same location, we don't need to pick the\r\n            // params like when `name` is provided\r\n            params = assign({}, currentLocation.params, location.params);\r\n            path = matcher.stringify(params);\r\n        }\r\n        const matched = [];\r\n        let parentMatcher = matcher;\r\n        while (parentMatcher) {\r\n            // reversed order so parents are at the beginning\r\n            matched.unshift(parentMatcher.record);\r\n            parentMatcher = parentMatcher.parent;\r\n        }\r\n        return {\r\n            name,\r\n            path,\r\n            params,\r\n            matched,\r\n            meta: mergeMetaFields(matched),\r\n        };\r\n    }\r\n    // add initial routes\r\n    routes.forEach(route => addRoute(route));\r\n    return { addRoute, resolve, removeRoute, getRoutes, getRecordMatcher };\r\n}\r\nfunction paramsFromLocation(params, keys) {\r\n    const newParams = {};\r\n    for (const key of keys) {\r\n        if (key in params)\r\n            newParams[key] = params[key];\r\n    }\r\n    return newParams;\r\n}\r\n/**\r\n * Normalizes a RouteRecordRaw. Creates a copy\r\n *\r\n * @param record\r\n * @returns the normalized version\r\n */\r\nfunction normalizeRouteRecord(record) {\r\n    return {\r\n        path: record.path,\r\n        redirect: record.redirect,\r\n        name: record.name,\r\n        meta: record.meta || {},\r\n        aliasOf: undefined,\r\n        beforeEnter: record.beforeEnter,\r\n        props: normalizeRecordProps(record),\r\n        children: record.children || [],\r\n        instances: {},\r\n        leaveGuards: new Set(),\r\n        updateGuards: new Set(),\r\n        enterCallbacks: {},\r\n        components: 'components' in record\r\n            ? record.components || {}\r\n            : { default: record.component },\r\n    };\r\n}\r\n/**\r\n * Normalize the optional `props` in a record to always be an object similar to\r\n * components. Also accept a boolean for components.\r\n * @param record\r\n */\r\nfunction normalizeRecordProps(record) {\r\n    const propsObject = {};\r\n    // props does not exist on redirect records but we can set false directly\r\n    const props = record.props || false;\r\n    if ('component' in record) {\r\n        propsObject.default = props;\r\n    }\r\n    else {\r\n        // NOTE: we could also allow a function to be applied to every component.\r\n        // Would need user feedback for use cases\r\n        for (const name in record.components)\r\n            propsObject[name] = typeof props === 'boolean' ? props : props[name];\r\n    }\r\n    return propsObject;\r\n}\r\n/**\r\n * Checks if a record or any of its parent is an alias\r\n * @param record\r\n */\r\nfunction isAliasRecord(record) {\r\n    while (record) {\r\n        if (record.record.aliasOf)\r\n            return true;\r\n        record = record.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Merge meta fields of an array of records\r\n *\r\n * @param matched - array of matched records\r\n */\r\nfunction mergeMetaFields(matched) {\r\n    return matched.reduce((meta, record) => assign(meta, record.meta), {});\r\n}\r\nfunction mergeOptions(defaults, partialOptions) {\r\n    const options = {};\r\n    for (const key in defaults) {\r\n        options[key] = key in partialOptions ? partialOptions[key] : defaults[key];\r\n    }\r\n    return options;\r\n}\r\nfunction isSameParam(a, b) {\r\n    return (a.name === b.name &&\r\n        a.optional === b.optional &&\r\n        a.repeatable === b.repeatable);\r\n}\r\n/**\r\n * Check if a path and its alias have the same required params\r\n *\r\n * @param a - original record\r\n * @param b - alias record\r\n */\r\nfunction checkSameParams(a, b) {\r\n    for (const key of a.keys) {\r\n        if (!key.optional && !b.keys.find(isSameParam.bind(null, key)))\r\n            return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\r\n    }\r\n    for (const key of b.keys) {\r\n        if (!key.optional && !a.keys.find(isSameParam.bind(null, key)))\r\n            return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\r\n    }\r\n}\r\nfunction checkMissingParamsInAbsolutePath(record, parent) {\r\n    for (const key of parent.keys) {\r\n        if (!record.keys.find(isSameParam.bind(null, key)))\r\n            return warn(`Absolute path \"${record.record.path}\" should have the exact same param named \"${key.name}\" as its parent \"${parent.record.path}\".`);\r\n    }\r\n}\n\n/**\r\n * Encoding Rules ␣ = Space Path: ␣ \" < > # ? { } Query: ␣ \" < > # & = Hash: ␣ \"\r\n * < > `\r\n *\r\n * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)\r\n * defines some extra characters to be encoded. Most browsers do not encode them\r\n * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to\r\n * also encode `!'()*`. Leaving unencoded only ASCII alphanumeric(`a-zA-Z0-9`)\r\n * plus `-._~`. This extra safety should be applied to query by patching the\r\n * string returned by encodeURIComponent encodeURI also encodes `[\\]^`. `\\`\r\n * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a `\\`\r\n * into a `/` if directly typed in. The _backtick_ (`````) should also be\r\n * encoded everywhere because some browsers like FF encode it when directly\r\n * written while others don't. Safari and IE don't encode ``\"<>{}``` in hash.\r\n */\r\n// const EXTRA_RESERVED_RE = /[!'()*]/g\r\n// const encodeReservedReplacer = (c: string) => '%' + c.charCodeAt(0).toString(16)\r\nconst HASH_RE = /#/g; // %23\r\nconst AMPERSAND_RE = /&/g; // %26\r\nconst SLASH_RE = /\\//g; // %2F\r\nconst EQUAL_RE = /=/g; // %3D\r\nconst IM_RE = /\\?/g; // %3F\r\nconst PLUS_RE = /\\+/g; // %2B\r\n/**\r\n * NOTE: It's not clear to me if we should encode the + symbol in queries, it\r\n * seems to be less flexible than not doing so and I can't find out the legacy\r\n * systems requiring this for regular requests like text/html. In the standard,\r\n * the encoding of the plus character is only mentioned for\r\n * application/x-www-form-urlencoded\r\n * (https://url.spec.whatwg.org/#urlencoded-parsing) and most browsers seems lo\r\n * leave the plus character as is in queries. To be more flexible, we allow the\r\n * plus character on the query but it can also be manually encoded by the user.\r\n *\r\n * Resources:\r\n * - https://url.spec.whatwg.org/#urlencoded-parsing\r\n * - https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20\r\n */\r\nconst ENC_BRACKET_OPEN_RE = /%5B/g; // [\r\nconst ENC_BRACKET_CLOSE_RE = /%5D/g; // ]\r\nconst ENC_CARET_RE = /%5E/g; // ^\r\nconst ENC_BACKTICK_RE = /%60/g; // `\r\nconst ENC_CURLY_OPEN_RE = /%7B/g; // {\r\nconst ENC_PIPE_RE = /%7C/g; // |\r\nconst ENC_CURLY_CLOSE_RE = /%7D/g; // }\r\nconst ENC_SPACE_RE = /%20/g; // }\r\n/**\r\n * Encode characters that need to be encoded on the path, search and hash\r\n * sections of the URL.\r\n *\r\n * @internal\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction commonEncode(text) {\r\n    return encodeURI('' + text)\r\n        .replace(ENC_PIPE_RE, '|')\r\n        .replace(ENC_BRACKET_OPEN_RE, '[')\r\n        .replace(ENC_BRACKET_CLOSE_RE, ']');\r\n}\r\n/**\r\n * Encode characters that need to be encoded on the hash section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodeHash(text) {\r\n    return commonEncode(text)\r\n        .replace(ENC_CURLY_OPEN_RE, '{')\r\n        .replace(ENC_CURLY_CLOSE_RE, '}')\r\n        .replace(ENC_CARET_RE, '^');\r\n}\r\n/**\r\n * Encode characters that need to be encoded query values on the query\r\n * section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodeQueryValue(text) {\r\n    return (commonEncode(text)\r\n        // Encode the space as +, encode the + to differentiate it from the space\r\n        .replace(PLUS_RE, '%2B')\r\n        .replace(ENC_SPACE_RE, '+')\r\n        .replace(HASH_RE, '%23')\r\n        .replace(AMPERSAND_RE, '%26')\r\n        .replace(ENC_BACKTICK_RE, '`')\r\n        .replace(ENC_CURLY_OPEN_RE, '{')\r\n        .replace(ENC_CURLY_CLOSE_RE, '}')\r\n        .replace(ENC_CARET_RE, '^'));\r\n}\r\n/**\r\n * Like `encodeQueryValue` but also encodes the `=` character.\r\n *\r\n * @param text - string to encode\r\n */\r\nfunction encodeQueryKey(text) {\r\n    return encodeQueryValue(text).replace(EQUAL_RE, '%3D');\r\n}\r\n/**\r\n * Encode characters that need to be encoded on the path section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodePath(text) {\r\n    return commonEncode(text).replace(HASH_RE, '%23').replace(IM_RE, '%3F');\r\n}\r\n/**\r\n * Encode characters that need to be encoded on the path section of the URL as a\r\n * param. This function encodes everything {@link encodePath} does plus the\r\n * slash (`/`) character. If `text` is `null` or `undefined`, returns an empty\r\n * string instead.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\r\nfunction encodeParam(text) {\r\n    return text == null ? '' : encodePath(text).replace(SLASH_RE, '%2F');\r\n}\r\n/**\r\n * Decode text using `decodeURIComponent`. Returns the original text if it\r\n * fails.\r\n *\r\n * @param text - string to decode\r\n * @returns decoded string\r\n */\r\nfunction decode(text) {\r\n    try {\r\n        return decodeURIComponent('' + text);\r\n    }\r\n    catch (err) {\r\n        (process.env.NODE_ENV !== 'production') && warn(`Error decoding \"${text}\". Using original value`);\r\n    }\r\n    return '' + text;\r\n}\n\n/**\r\n * Transforms a queryString into a {@link LocationQuery} object. Accept both, a\r\n * version with the leading `?` and without Should work as URLSearchParams\r\n\n * @internal\r\n *\r\n * @param search - search string to parse\r\n * @returns a query object\r\n */\r\nfunction parseQuery(search) {\r\n    const query = {};\r\n    // avoid creating an object with an empty key and empty value\r\n    // because of split('&')\r\n    if (search === '' || search === '?')\r\n        return query;\r\n    const hasLeadingIM = search[0] === '?';\r\n    const searchParams = (hasLeadingIM ? search.slice(1) : search).split('&');\r\n    for (let i = 0; i < searchParams.length; ++i) {\r\n        // pre decode the + into space\r\n        const searchParam = searchParams[i].replace(PLUS_RE, ' ');\r\n        // allow the = character\r\n        const eqPos = searchParam.indexOf('=');\r\n        const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));\r\n        const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));\r\n        if (key in query) {\r\n            // an extra variable for ts types\r\n            let currentValue = query[key];\r\n            if (!Array.isArray(currentValue)) {\r\n                currentValue = query[key] = [currentValue];\r\n            }\r\n            currentValue.push(value);\r\n        }\r\n        else {\r\n            query[key] = value;\r\n        }\r\n    }\r\n    return query;\r\n}\r\n/**\r\n * Stringifies a {@link LocationQueryRaw} object. Like `URLSearchParams`, it\r\n * doesn't prepend a `?`\r\n *\r\n * @internal\r\n *\r\n * @param query - query object to stringify\r\n * @returns string version of the query without the leading `?`\r\n */\r\nfunction stringifyQuery(query) {\r\n    let search = '';\r\n    for (let key in query) {\r\n        const value = query[key];\r\n        key = encodeQueryKey(key);\r\n        if (value == null) {\r\n            // only null adds the value\r\n            if (value !== undefined) {\r\n                search += (search.length ? '&' : '') + key;\r\n            }\r\n            continue;\r\n        }\r\n        // keep null values\r\n        const values = Array.isArray(value)\r\n            ? value.map(v => v && encodeQueryValue(v))\r\n            : [value && encodeQueryValue(value)];\r\n        values.forEach(value => {\r\n            // skip undefined values in arrays as if they were not present\r\n            // smaller code than using filter\r\n            if (value !== undefined) {\r\n                // only append & with non-empty search\r\n                search += (search.length ? '&' : '') + key;\r\n                if (value != null)\r\n                    search += '=' + value;\r\n            }\r\n        });\r\n    }\r\n    return search;\r\n}\r\n/**\r\n * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting\r\n * numbers into strings, removing keys with an undefined value and replacing\r\n * undefined with null in arrays\r\n *\r\n * @param query - query object to normalize\r\n * @returns a normalized query object\r\n */\r\nfunction normalizeQuery(query) {\r\n    const normalizedQuery = {};\r\n    for (const key in query) {\r\n        const value = query[key];\r\n        if (value !== undefined) {\r\n            normalizedQuery[key] = Array.isArray(value)\r\n                ? value.map(v => (v == null ? null : '' + v))\r\n                : value == null\r\n                    ? value\r\n                    : '' + value;\r\n        }\r\n    }\r\n    return normalizedQuery;\r\n}\n\n/**\r\n * Create a list of callbacks that can be reset. Used to create before and after navigation guards list\r\n */\r\nfunction useCallbacks() {\r\n    let handlers = [];\r\n    function add(handler) {\r\n        handlers.push(handler);\r\n        return () => {\r\n            const i = handlers.indexOf(handler);\r\n            if (i > -1)\r\n                handlers.splice(i, 1);\r\n        };\r\n    }\r\n    function reset() {\r\n        handlers = [];\r\n    }\r\n    return {\r\n        add,\r\n        list: () => handlers,\r\n        reset,\r\n    };\r\n}\n\nfunction registerGuard(record, name, guard) {\r\n    const removeFromList = () => {\r\n        record[name].delete(guard);\r\n    };\r\n    onUnmounted(removeFromList);\r\n    onDeactivated(removeFromList);\r\n    onActivated(() => {\r\n        record[name].add(guard);\r\n    });\r\n    record[name].add(guard);\r\n}\r\n/**\r\n * Add a navigation guard that triggers whenever the component for the current\r\n * location is about to be left. Similar to {@link beforeRouteLeave} but can be\r\n * used in any component. The guard is removed when the component is unmounted.\r\n *\r\n * @param leaveGuard - {@link NavigationGuard}\r\n */\r\nfunction onBeforeRouteLeave(leaveGuard) {\r\n    if ((process.env.NODE_ENV !== 'production') && !getCurrentInstance()) {\r\n        warn('getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function');\r\n        return;\r\n    }\r\n    const activeRecord = inject(matchedRouteKey, \r\n    // to avoid warning\r\n    {}).value;\r\n    if (!activeRecord) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn('No active route record was found. Are you missing a <router-view> component?');\r\n        return;\r\n    }\r\n    registerGuard(activeRecord, 'leaveGuards', leaveGuard);\r\n}\r\n/**\r\n * Add a navigation guard that triggers whenever the current location is about\r\n * to be updated. Similar to {@link beforeRouteUpdate} but can be used in any\r\n * component. The guard is removed when the component is unmounted.\r\n *\r\n * @param updateGuard - {@link NavigationGuard}\r\n */\r\nfunction onBeforeRouteUpdate(updateGuard) {\r\n    if ((process.env.NODE_ENV !== 'production') && !getCurrentInstance()) {\r\n        warn('getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function');\r\n        return;\r\n    }\r\n    const activeRecord = inject(matchedRouteKey, \r\n    // to avoid warning\r\n    {}).value;\r\n    if (!activeRecord) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn('No active route record was found. Are you missing a <router-view> component?');\r\n        return;\r\n    }\r\n    registerGuard(activeRecord, 'updateGuards', updateGuard);\r\n}\r\nfunction guardToPromiseFn(guard, to, from, record, name) {\r\n    // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place\r\n    const enterCallbackArray = record &&\r\n        // name is defined if record is because of the function overload\r\n        (record.enterCallbacks[name] = record.enterCallbacks[name] || []);\r\n    return () => new Promise((resolve, reject) => {\r\n        const next = (valid) => {\r\n            if (valid === false)\r\n                reject(createRouterError(4 /* NAVIGATION_ABORTED */, {\r\n                    from,\r\n                    to,\r\n                }));\r\n            else if (valid instanceof Error) {\r\n                reject(valid);\r\n            }\r\n            else if (isRouteLocation(valid)) {\r\n                reject(createRouterError(2 /* NAVIGATION_GUARD_REDIRECT */, {\r\n                    from: to,\r\n                    to: valid,\r\n                }));\r\n            }\r\n            else {\r\n                if (enterCallbackArray &&\r\n                    // since enterCallbackArray is truthy, both record and name also are\r\n                    record.enterCallbacks[name] === enterCallbackArray &&\r\n                    typeof valid === 'function')\r\n                    enterCallbackArray.push(valid);\r\n                resolve();\r\n            }\r\n        };\r\n        // wrapping with Promise.resolve allows it to work with both async and sync guards\r\n        const guardReturn = guard.call(record && record.instances[name], to, from, (process.env.NODE_ENV !== 'production') ? canOnlyBeCalledOnce(next, to, from) : next);\r\n        let guardCall = Promise.resolve(guardReturn);\r\n        if (guard.length < 3)\r\n            guardCall = guardCall.then(next);\r\n        if ((process.env.NODE_ENV !== 'production') && guard.length > 2) {\r\n            const message = `The \"next\" callback was never called inside of ${guard.name ? '\"' + guard.name + '\"' : ''}:\\n${guard.toString()}\\n. If you are returning a value instead of calling \"next\", make sure to remove the \"next\" parameter from your function.`;\r\n            if (typeof guardReturn === 'object' && 'then' in guardReturn) {\r\n                guardCall = guardCall.then(resolvedValue => {\r\n                    // @ts-expect-error: _called is added at canOnlyBeCalledOnce\r\n                    if (!next._called) {\r\n                        warn(message);\r\n                        return Promise.reject(new Error('Invalid navigation guard'));\r\n                    }\r\n                    return resolvedValue;\r\n                });\r\n                // TODO: test me!\r\n            }\r\n            else if (guardReturn !== undefined) {\r\n                // @ts-expect-error: _called is added at canOnlyBeCalledOnce\r\n                if (!next._called) {\r\n                    warn(message);\r\n                    reject(new Error('Invalid navigation guard'));\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        guardCall.catch(err => reject(err));\r\n    });\r\n}\r\nfunction canOnlyBeCalledOnce(next, to, from) {\r\n    let called = 0;\r\n    return function () {\r\n        if (called++ === 1)\r\n            warn(`The \"next\" callback was called more than once in one navigation guard when going from \"${from.fullPath}\" to \"${to.fullPath}\". It should be called exactly one time in each navigation guard. This will fail in production.`);\r\n        // @ts-expect-error: we put it in the original one because it's easier to check\r\n        next._called = true;\r\n        if (called === 1)\r\n            next.apply(null, arguments);\r\n    };\r\n}\r\nfunction extractComponentsGuards(matched, guardType, to, from) {\r\n    const guards = [];\r\n    for (const record of matched) {\r\n        for (const name in record.components) {\r\n            let rawComponent = record.components[name];\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (!rawComponent ||\r\n                    (typeof rawComponent !== 'object' &&\r\n                        typeof rawComponent !== 'function')) {\r\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is not` +\r\n                        ` a valid component. Received \"${String(rawComponent)}\".`);\r\n                    // throw to ensure we stop here but warn to ensure the message isn't\r\n                    // missed by the user\r\n                    throw new Error('Invalid route component');\r\n                }\r\n                else if ('then' in rawComponent) {\r\n                    // warn if user wrote import('/component.vue') instead of () =>\r\n                    // import('./component.vue')\r\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is a ` +\r\n                        `Promise instead of a function that returns a Promise. Did you ` +\r\n                        `write \"import('./MyPage.vue')\" instead of ` +\r\n                        `\"() => import('./MyPage.vue')\" ? This will break in ` +\r\n                        `production if not fixed.`);\r\n                    const promise = rawComponent;\r\n                    rawComponent = () => promise;\r\n                }\r\n                else if (rawComponent.__asyncLoader &&\r\n                    // warn only once per component\r\n                    !rawComponent.__warnedDefineAsync) {\r\n                    rawComponent.__warnedDefineAsync = true;\r\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is defined ` +\r\n                        `using \"defineAsyncComponent()\". ` +\r\n                        `Write \"() => import('./MyPage.vue')\" instead of ` +\r\n                        `\"defineAsyncComponent(() => import('./MyPage.vue'))\".`);\r\n                }\r\n            }\r\n            // skip update and leave guards if the route component is not mounted\r\n            if (guardType !== 'beforeRouteEnter' && !record.instances[name])\r\n                continue;\r\n            if (isRouteComponent(rawComponent)) {\r\n                // __vccOpts is added by vue-class-component and contain the regular options\r\n                const options = rawComponent.__vccOpts || rawComponent;\r\n                const guard = options[guardType];\r\n                guard && guards.push(guardToPromiseFn(guard, to, from, record, name));\r\n            }\r\n            else {\r\n                // start requesting the chunk already\r\n                let componentPromise = rawComponent();\r\n                if ((process.env.NODE_ENV !== 'production') && !('catch' in componentPromise)) {\r\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is a function that does not return a Promise. If you were passing a functional component, make sure to add a \"displayName\" to the component. This will break in production if not fixed.`);\r\n                    componentPromise = Promise.resolve(componentPromise);\r\n                }\r\n                guards.push(() => componentPromise.then(resolved => {\r\n                    if (!resolved)\r\n                        return Promise.reject(new Error(`Couldn't resolve component \"${name}\" at \"${record.path}\"`));\r\n                    const resolvedComponent = isESModule(resolved)\r\n                        ? resolved.default\r\n                        : resolved;\r\n                    // replace the function with the resolved component\r\n                    record.components[name] = resolvedComponent;\r\n                    // __vccOpts is added by vue-class-component and contain the regular options\r\n                    const options = resolvedComponent.__vccOpts || resolvedComponent;\r\n                    const guard = options[guardType];\r\n                    return guard && guardToPromiseFn(guard, to, from, record, name)();\r\n                }));\r\n            }\r\n        }\r\n    }\r\n    return guards;\r\n}\r\n/**\r\n * Allows differentiating lazy components from functional components and vue-class-component\r\n *\r\n * @param component\r\n */\r\nfunction isRouteComponent(component) {\r\n    return (typeof component === 'object' ||\r\n        'displayName' in component ||\r\n        'props' in component ||\r\n        '__vccOpts' in component);\r\n}\n\n// TODO: we could allow currentRoute as a prop to expose `isActive` and\r\n// `isExactActive` behavior should go through an RFC\r\nfunction useLink(props) {\r\n    const router = inject(routerKey);\r\n    const currentRoute = inject(routeLocationKey);\r\n    const route = computed(() => router.resolve(unref(props.to)));\r\n    const activeRecordIndex = computed(() => {\r\n        const { matched } = route.value;\r\n        const { length } = matched;\r\n        const routeMatched = matched[length - 1];\r\n        const currentMatched = currentRoute.matched;\r\n        if (!routeMatched || !currentMatched.length)\r\n            return -1;\r\n        const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));\r\n        if (index > -1)\r\n            return index;\r\n        // possible parent record\r\n        const parentRecordPath = getOriginalPath(matched[length - 2]);\r\n        return (\r\n        // we are dealing with nested routes\r\n        length > 1 &&\r\n            // if the parent and matched route have the same path, this link is\r\n            // referring to the empty child. Or we currently are on a different\r\n            // child of the same parent\r\n            getOriginalPath(routeMatched) === parentRecordPath &&\r\n            // avoid comparing the child with its parent\r\n            currentMatched[currentMatched.length - 1].path !== parentRecordPath\r\n            ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2]))\r\n            : index);\r\n    });\r\n    const isActive = computed(() => activeRecordIndex.value > -1 &&\r\n        includesParams(currentRoute.params, route.value.params));\r\n    const isExactActive = computed(() => activeRecordIndex.value > -1 &&\r\n        activeRecordIndex.value === currentRoute.matched.length - 1 &&\r\n        isSameRouteLocationParams(currentRoute.params, route.value.params));\r\n    function navigate(e = {}) {\r\n        if (guardEvent(e)) {\r\n            return router[unref(props.replace) ? 'replace' : 'push'](unref(props.to)\r\n            // avoid uncaught errors are they are logged anyway\r\n            ).catch(noop);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    // devtools only\r\n    if (((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) && isBrowser) {\r\n        const instance = getCurrentInstance();\r\n        if (instance) {\r\n            const linkContextDevtools = {\r\n                route: route.value,\r\n                isActive: isActive.value,\r\n                isExactActive: isExactActive.value,\r\n            };\r\n            // @ts-expect-error: this is internal\r\n            instance.__vrl_devtools = instance.__vrl_devtools || [];\r\n            // @ts-expect-error: this is internal\r\n            instance.__vrl_devtools.push(linkContextDevtools);\r\n            watchEffect(() => {\r\n                linkContextDevtools.route = route.value;\r\n                linkContextDevtools.isActive = isActive.value;\r\n                linkContextDevtools.isExactActive = isExactActive.value;\r\n            }, { flush: 'post' });\r\n        }\r\n    }\r\n    return {\r\n        route,\r\n        href: computed(() => route.value.href),\r\n        isActive,\r\n        isExactActive,\r\n        navigate,\r\n    };\r\n}\r\nconst RouterLinkImpl = /*#__PURE__*/ defineComponent({\r\n    name: 'RouterLink',\r\n    props: {\r\n        to: {\r\n            type: [String, Object],\r\n            required: true,\r\n        },\r\n        replace: Boolean,\r\n        activeClass: String,\r\n        // inactiveClass: String,\r\n        exactActiveClass: String,\r\n        custom: Boolean,\r\n        ariaCurrentValue: {\r\n            type: String,\r\n            default: 'page',\r\n        },\r\n    },\r\n    useLink,\r\n    setup(props, { slots }) {\r\n        const link = reactive(useLink(props));\r\n        const { options } = inject(routerKey);\r\n        const elClass = computed(() => ({\r\n            [getLinkClass(props.activeClass, options.linkActiveClass, 'router-link-active')]: link.isActive,\r\n            // [getLinkClass(\r\n            //   props.inactiveClass,\r\n            //   options.linkInactiveClass,\r\n            //   'router-link-inactive'\r\n            // )]: !link.isExactActive,\r\n            [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, 'router-link-exact-active')]: link.isExactActive,\r\n        }));\r\n        return () => {\r\n            const children = slots.default && slots.default(link);\r\n            return props.custom\r\n                ? children\r\n                : h('a', {\r\n                    'aria-current': link.isExactActive\r\n                        ? props.ariaCurrentValue\r\n                        : null,\r\n                    href: link.href,\r\n                    // this would override user added attrs but Vue will still add\r\n                    // the listener so we end up triggering both\r\n                    onClick: link.navigate,\r\n                    class: elClass.value,\r\n                }, children);\r\n        };\r\n    },\r\n});\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\n/**\r\n * Component to render a link that triggers a navigation on click.\r\n */\r\nconst RouterLink = RouterLinkImpl;\r\nfunction guardEvent(e) {\r\n    // don't redirect with control keys\r\n    if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)\r\n        return;\r\n    // don't redirect when preventDefault called\r\n    if (e.defaultPrevented)\r\n        return;\r\n    // don't redirect on right click\r\n    if (e.button !== undefined && e.button !== 0)\r\n        return;\r\n    // don't redirect if `target=\"_blank\"`\r\n    // @ts-expect-error getAttribute does exist\r\n    if (e.currentTarget && e.currentTarget.getAttribute) {\r\n        // @ts-expect-error getAttribute exists\r\n        const target = e.currentTarget.getAttribute('target');\r\n        if (/\\b_blank\\b/i.test(target))\r\n            return;\r\n    }\r\n    // this may be a Weex event which doesn't have this method\r\n    if (e.preventDefault)\r\n        e.preventDefault();\r\n    return true;\r\n}\r\nfunction includesParams(outer, inner) {\r\n    for (const key in inner) {\r\n        const innerValue = inner[key];\r\n        const outerValue = outer[key];\r\n        if (typeof innerValue === 'string') {\r\n            if (innerValue !== outerValue)\r\n                return false;\r\n        }\r\n        else {\r\n            if (!Array.isArray(outerValue) ||\r\n                outerValue.length !== innerValue.length ||\r\n                innerValue.some((value, i) => value !== outerValue[i]))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Get the original path value of a record by following its aliasOf\r\n * @param record\r\n */\r\nfunction getOriginalPath(record) {\r\n    return record ? (record.aliasOf ? record.aliasOf.path : record.path) : '';\r\n}\r\n/**\r\n * Utility class to get the active class based on defaults.\r\n * @param propClass\r\n * @param globalClass\r\n * @param defaultClass\r\n */\r\nconst getLinkClass = (propClass, globalClass, defaultClass) => propClass != null\r\n    ? propClass\r\n    : globalClass != null\r\n        ? globalClass\r\n        : defaultClass;\n\nconst RouterViewImpl = /*#__PURE__*/ defineComponent({\r\n    name: 'RouterView',\r\n    // #674 we manually inherit them\r\n    inheritAttrs: false,\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            default: 'default',\r\n        },\r\n        route: Object,\r\n    },\r\n    setup(props, { attrs, slots }) {\r\n        (process.env.NODE_ENV !== 'production') && warnDeprecatedUsage();\r\n        const injectedRoute = inject(routerViewLocationKey);\r\n        const routeToDisplay = computed(() => props.route || injectedRoute.value);\r\n        const depth = inject(viewDepthKey, 0);\r\n        const matchedRouteRef = computed(() => routeToDisplay.value.matched[depth]);\r\n        provide(viewDepthKey, depth + 1);\r\n        provide(matchedRouteKey, matchedRouteRef);\r\n        provide(routerViewLocationKey, routeToDisplay);\r\n        const viewRef = ref();\r\n        // watch at the same time the component instance, the route record we are\r\n        // rendering, and the name\r\n        watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to, name], [oldInstance, from, oldName]) => {\r\n            // copy reused instances\r\n            if (to) {\r\n                // this will update the instance for new instances as well as reused\r\n                // instances when navigating to a new route\r\n                to.instances[name] = instance;\r\n                // the component instance is reused for a different route or name so\r\n                // we copy any saved update or leave guards. With async setup, the\r\n                // mounting component will mount before the matchedRoute changes,\r\n                // making instance === oldInstance, so we check if guards have been\r\n                // added before. This works because we remove guards when\r\n                // unmounting/deactivating components\r\n                if (from && from !== to && instance && instance === oldInstance) {\r\n                    if (!to.leaveGuards.size) {\r\n                        to.leaveGuards = from.leaveGuards;\r\n                    }\r\n                    if (!to.updateGuards.size) {\r\n                        to.updateGuards = from.updateGuards;\r\n                    }\r\n                }\r\n            }\r\n            // trigger beforeRouteEnter next callbacks\r\n            if (instance &&\r\n                to &&\r\n                // if there is no instance but to and from are the same this might be\r\n                // the first visit\r\n                (!from || !isSameRouteRecord(to, from) || !oldInstance)) {\r\n                (to.enterCallbacks[name] || []).forEach(callback => callback(instance));\r\n            }\r\n        }, { flush: 'post' });\r\n        return () => {\r\n            const route = routeToDisplay.value;\r\n            const matchedRoute = matchedRouteRef.value;\r\n            const ViewComponent = matchedRoute && matchedRoute.components[props.name];\r\n            // we need the value at the time we render because when we unmount, we\r\n            // navigated to a different location so the value is different\r\n            const currentName = props.name;\r\n            if (!ViewComponent) {\r\n                return normalizeSlot(slots.default, { Component: ViewComponent, route });\r\n            }\r\n            // props from route configuration\r\n            const routePropsOption = matchedRoute.props[props.name];\r\n            const routeProps = routePropsOption\r\n                ? routePropsOption === true\r\n                    ? route.params\r\n                    : typeof routePropsOption === 'function'\r\n                        ? routePropsOption(route)\r\n                        : routePropsOption\r\n                : null;\r\n            const onVnodeUnmounted = vnode => {\r\n                // remove the instance reference to prevent leak\r\n                if (vnode.component.isUnmounted) {\r\n                    matchedRoute.instances[currentName] = null;\r\n                }\r\n            };\r\n            const component = h(ViewComponent, assign({}, routeProps, attrs, {\r\n                onVnodeUnmounted,\r\n                ref: viewRef,\r\n            }));\r\n            return (\r\n            // pass the vnode to the slot as a prop.\r\n            // h and <component :is=\"...\"> both accept vnodes\r\n            normalizeSlot(slots.default, { Component: component, route }) ||\r\n                component);\r\n        };\r\n    },\r\n});\r\nfunction normalizeSlot(slot, data) {\r\n    if (!slot)\r\n        return null;\r\n    const slotContent = slot(data);\r\n    return slotContent.length === 1 ? slotContent[0] : slotContent;\r\n}\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\n/**\r\n * Component to display the current route the user is at.\r\n */\r\nconst RouterView = RouterViewImpl;\r\n// warn against deprecated usage with <transition> & <keep-alive>\r\n// due to functional component being no longer eager in Vue 3\r\nfunction warnDeprecatedUsage() {\r\n    const instance = getCurrentInstance();\r\n    const parentName = instance.parent && instance.parent.type.name;\r\n    if (parentName &&\r\n        (parentName === 'KeepAlive' || parentName.includes('Transition'))) {\r\n        const comp = parentName === 'KeepAlive' ? 'keep-alive' : 'transition';\r\n        warn(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\\n` +\r\n            `Use slot props instead:\\n\\n` +\r\n            `<router-view v-slot=\"{ Component }\">\\n` +\r\n            `  <${comp}>\\n` +\r\n            `    <component :is=\"Component\" />\\n` +\r\n            `  </${comp}>\\n` +\r\n            `</router-view>`);\r\n    }\r\n}\n\nfunction formatRouteLocation(routeLocation, tooltip) {\r\n    const copy = assign({}, routeLocation, {\r\n        // remove variables that can contain vue instances\r\n        matched: routeLocation.matched.map(matched => omit(matched, ['instances', 'children', 'aliasOf'])),\r\n    });\r\n    return {\r\n        _custom: {\r\n            type: null,\r\n            readOnly: true,\r\n            display: routeLocation.fullPath,\r\n            tooltip,\r\n            value: copy,\r\n        },\r\n    };\r\n}\r\nfunction formatDisplay(display) {\r\n    return {\r\n        _custom: {\r\n            display,\r\n        },\r\n    };\r\n}\r\n// to support multiple router instances\r\nlet routerId = 0;\r\nfunction addDevtools(app, router, matcher) {\r\n    // Take over router.beforeEach and afterEach\r\n    // make sure we are not registering the devtool twice\r\n    if (router.__hasDevtools)\r\n        return;\r\n    router.__hasDevtools = true;\r\n    // increment to support multiple router instances\r\n    const id = routerId++;\r\n    setupDevtoolsPlugin({\r\n        id: 'org.vuejs.router' + (id ? '.' + id : ''),\r\n        label: 'Vue Router',\r\n        packageName: 'vue-router',\r\n        homepage: 'https://next.router.vuejs.org/',\r\n        logo: 'https://vuejs.org/images/icons/favicon-96x96.png',\r\n        componentStateTypes: ['Routing'],\r\n        app,\r\n    }, api => {\r\n        // display state added by the router\r\n        api.on.inspectComponent((payload, ctx) => {\r\n            if (payload.instanceData) {\r\n                payload.instanceData.state.push({\r\n                    type: 'Routing',\r\n                    key: '$route',\r\n                    editable: false,\r\n                    value: formatRouteLocation(router.currentRoute.value, 'Current Route'),\r\n                });\r\n            }\r\n        });\r\n        // mark router-link as active\r\n        api.on.visitComponentTree(({ treeNode: node, componentInstance }) => {\r\n            // if multiple useLink are used\r\n            if (Array.isArray(componentInstance.__vrl_devtools)) {\r\n                componentInstance.__devtoolsApi = api;\r\n                componentInstance.__vrl_devtools.forEach(devtoolsData => {\r\n                    let backgroundColor = ORANGE_400;\r\n                    let tooltip = '';\r\n                    if (devtoolsData.isExactActive) {\r\n                        backgroundColor = LIME_500;\r\n                        tooltip = 'This is exactly active';\r\n                    }\r\n                    else if (devtoolsData.isActive) {\r\n                        backgroundColor = BLUE_600;\r\n                        tooltip = 'This link is active';\r\n                    }\r\n                    node.tags.push({\r\n                        label: devtoolsData.route.path,\r\n                        textColor: 0,\r\n                        tooltip,\r\n                        backgroundColor,\r\n                    });\r\n                });\r\n            }\r\n        });\r\n        watch(router.currentRoute, () => {\r\n            // refresh active state\r\n            refreshRoutesView();\r\n            api.notifyComponentUpdate();\r\n            api.sendInspectorTree(routerInspectorId);\r\n            api.sendInspectorState(routerInspectorId);\r\n        });\r\n        const navigationsLayerId = 'router:navigations:' + id;\r\n        api.addTimelineLayer({\r\n            id: navigationsLayerId,\r\n            label: `Router${id ? ' ' + id : ''} Navigations`,\r\n            color: 0x40a8c4,\r\n        });\r\n        // const errorsLayerId = 'router:errors'\r\n        // api.addTimelineLayer({\r\n        //   id: errorsLayerId,\r\n        //   label: 'Router Errors',\r\n        //   color: 0xea5455,\r\n        // })\r\n        router.onError((error, to) => {\r\n            api.addTimelineEvent({\r\n                layerId: navigationsLayerId,\r\n                event: {\r\n                    title: 'Error during Navigation',\r\n                    subtitle: to.fullPath,\r\n                    logType: 'error',\r\n                    time: Date.now(),\r\n                    data: { error },\r\n                    groupId: to.meta.__navigationId,\r\n                },\r\n            });\r\n        });\r\n        // attached to `meta` and used to group events\r\n        let navigationId = 0;\r\n        router.beforeEach((to, from) => {\r\n            const data = {\r\n                guard: formatDisplay('beforeEach'),\r\n                from: formatRouteLocation(from, 'Current Location during this navigation'),\r\n                to: formatRouteLocation(to, 'Target location'),\r\n            };\r\n            // Used to group navigations together, hide from devtools\r\n            Object.defineProperty(to.meta, '__navigationId', {\r\n                value: navigationId++,\r\n            });\r\n            api.addTimelineEvent({\r\n                layerId: navigationsLayerId,\r\n                event: {\r\n                    time: Date.now(),\r\n                    title: 'Start of navigation',\r\n                    subtitle: to.fullPath,\r\n                    data,\r\n                    groupId: to.meta.__navigationId,\r\n                },\r\n            });\r\n        });\r\n        router.afterEach((to, from, failure) => {\r\n            const data = {\r\n                guard: formatDisplay('afterEach'),\r\n            };\r\n            if (failure) {\r\n                data.failure = {\r\n                    _custom: {\r\n                        type: Error,\r\n                        readOnly: true,\r\n                        display: failure ? failure.message : '',\r\n                        tooltip: 'Navigation Failure',\r\n                        value: failure,\r\n                    },\r\n                };\r\n                data.status = formatDisplay('❌');\r\n            }\r\n            else {\r\n                data.status = formatDisplay('✅');\r\n            }\r\n            // we set here to have the right order\r\n            data.from = formatRouteLocation(from, 'Current Location during this navigation');\r\n            data.to = formatRouteLocation(to, 'Target location');\r\n            api.addTimelineEvent({\r\n                layerId: navigationsLayerId,\r\n                event: {\r\n                    title: 'End of navigation',\r\n                    subtitle: to.fullPath,\r\n                    time: Date.now(),\r\n                    data,\r\n                    logType: failure ? 'warning' : 'default',\r\n                    groupId: to.meta.__navigationId,\r\n                },\r\n            });\r\n        });\r\n        /**\r\n         * Inspector of Existing routes\r\n         */\r\n        const routerInspectorId = 'router-inspector:' + id;\r\n        api.addInspector({\r\n            id: routerInspectorId,\r\n            label: 'Routes' + (id ? ' ' + id : ''),\r\n            icon: 'book',\r\n            treeFilterPlaceholder: 'Search routes',\r\n        });\r\n        function refreshRoutesView() {\r\n            // the routes view isn't active\r\n            if (!activeRoutesPayload)\r\n                return;\r\n            const payload = activeRoutesPayload;\r\n            // children routes will appear as nested\r\n            let routes = matcher.getRoutes().filter(route => !route.parent);\r\n            // reset match state to false\r\n            routes.forEach(resetMatchStateOnRouteRecord);\r\n            // apply a match state if there is a payload\r\n            if (payload.filter) {\r\n                routes = routes.filter(route => \r\n                // save matches state based on the payload\r\n                isRouteMatching(route, payload.filter.toLowerCase()));\r\n            }\r\n            // mark active routes\r\n            routes.forEach(route => markRouteRecordActive(route, router.currentRoute.value));\r\n            payload.rootNodes = routes.map(formatRouteRecordForInspector);\r\n        }\r\n        let activeRoutesPayload;\r\n        api.on.getInspectorTree(payload => {\r\n            activeRoutesPayload = payload;\r\n            if (payload.app === app && payload.inspectorId === routerInspectorId) {\r\n                refreshRoutesView();\r\n            }\r\n        });\r\n        /**\r\n         * Display information about the currently selected route record\r\n         */\r\n        api.on.getInspectorState(payload => {\r\n            if (payload.app === app && payload.inspectorId === routerInspectorId) {\r\n                const routes = matcher.getRoutes();\r\n                const route = routes.find(route => route.record.__vd_id === payload.nodeId);\r\n                if (route) {\r\n                    payload.state = {\r\n                        options: formatRouteRecordMatcherForStateInspector(route),\r\n                    };\r\n                }\r\n            }\r\n        });\r\n        api.sendInspectorTree(routerInspectorId);\r\n        api.sendInspectorState(routerInspectorId);\r\n    });\r\n}\r\nfunction modifierForKey(key) {\r\n    if (key.optional) {\r\n        return key.repeatable ? '*' : '?';\r\n    }\r\n    else {\r\n        return key.repeatable ? '+' : '';\r\n    }\r\n}\r\nfunction formatRouteRecordMatcherForStateInspector(route) {\r\n    const { record } = route;\r\n    const fields = [\r\n        { editable: false, key: 'path', value: record.path },\r\n    ];\r\n    if (record.name != null) {\r\n        fields.push({\r\n            editable: false,\r\n            key: 'name',\r\n            value: record.name,\r\n        });\r\n    }\r\n    fields.push({ editable: false, key: 'regexp', value: route.re });\r\n    if (route.keys.length) {\r\n        fields.push({\r\n            editable: false,\r\n            key: 'keys',\r\n            value: {\r\n                _custom: {\r\n                    type: null,\r\n                    readOnly: true,\r\n                    display: route.keys\r\n                        .map(key => `${key.name}${modifierForKey(key)}`)\r\n                        .join(' '),\r\n                    tooltip: 'Param keys',\r\n                    value: route.keys,\r\n                },\r\n            },\r\n        });\r\n    }\r\n    if (record.redirect != null) {\r\n        fields.push({\r\n            editable: false,\r\n            key: 'redirect',\r\n            value: record.redirect,\r\n        });\r\n    }\r\n    if (route.alias.length) {\r\n        fields.push({\r\n            editable: false,\r\n            key: 'aliases',\r\n            value: route.alias.map(alias => alias.record.path),\r\n        });\r\n    }\r\n    fields.push({\r\n        key: 'score',\r\n        editable: false,\r\n        value: {\r\n            _custom: {\r\n                type: null,\r\n                readOnly: true,\r\n                display: route.score.map(score => score.join(', ')).join(' | '),\r\n                tooltip: 'Score used to sort routes',\r\n                value: route.score,\r\n            },\r\n        },\r\n    });\r\n    return fields;\r\n}\r\n/**\r\n * Extracted from tailwind palette\r\n */\r\nconst PINK_500 = 0xec4899;\r\nconst BLUE_600 = 0x2563eb;\r\nconst LIME_500 = 0x84cc16;\r\nconst CYAN_400 = 0x22d3ee;\r\nconst ORANGE_400 = 0xfb923c;\r\n// const GRAY_100 = 0xf4f4f5\r\nconst DARK = 0x666666;\r\nfunction formatRouteRecordForInspector(route) {\r\n    const tags = [];\r\n    const { record } = route;\r\n    if (record.name != null) {\r\n        tags.push({\r\n            label: String(record.name),\r\n            textColor: 0,\r\n            backgroundColor: CYAN_400,\r\n        });\r\n    }\r\n    if (record.aliasOf) {\r\n        tags.push({\r\n            label: 'alias',\r\n            textColor: 0,\r\n            backgroundColor: ORANGE_400,\r\n        });\r\n    }\r\n    if (route.__vd_match) {\r\n        tags.push({\r\n            label: 'matches',\r\n            textColor: 0,\r\n            backgroundColor: PINK_500,\r\n        });\r\n    }\r\n    if (route.__vd_exactActive) {\r\n        tags.push({\r\n            label: 'exact',\r\n            textColor: 0,\r\n            backgroundColor: LIME_500,\r\n        });\r\n    }\r\n    if (route.__vd_active) {\r\n        tags.push({\r\n            label: 'active',\r\n            textColor: 0,\r\n            backgroundColor: BLUE_600,\r\n        });\r\n    }\r\n    if (record.redirect) {\r\n        tags.push({\r\n            label: 'redirect: ' +\r\n                (typeof record.redirect === 'string' ? record.redirect : 'Object'),\r\n            textColor: 0xffffff,\r\n            backgroundColor: DARK,\r\n        });\r\n    }\r\n    // add an id to be able to select it. Using the `path` is not possible because\r\n    // empty path children would collide with their parents\r\n    let id = record.__vd_id;\r\n    if (id == null) {\r\n        id = String(routeRecordId++);\r\n        record.__vd_id = id;\r\n    }\r\n    return {\r\n        id,\r\n        label: record.path,\r\n        tags,\r\n        children: route.children.map(formatRouteRecordForInspector),\r\n    };\r\n}\r\n//  incremental id for route records and inspector state\r\nlet routeRecordId = 0;\r\nconst EXTRACT_REGEXP_RE = /^\\/(.*)\\/([a-z]*)$/;\r\nfunction markRouteRecordActive(route, currentRoute) {\r\n    // no route will be active if matched is empty\r\n    // reset the matching state\r\n    const isExactActive = currentRoute.matched.length &&\r\n        isSameRouteRecord(currentRoute.matched[currentRoute.matched.length - 1], route.record);\r\n    route.__vd_exactActive = route.__vd_active = isExactActive;\r\n    if (!isExactActive) {\r\n        route.__vd_active = currentRoute.matched.some(match => isSameRouteRecord(match, route.record));\r\n    }\r\n    route.children.forEach(childRoute => markRouteRecordActive(childRoute, currentRoute));\r\n}\r\nfunction resetMatchStateOnRouteRecord(route) {\r\n    route.__vd_match = false;\r\n    route.children.forEach(resetMatchStateOnRouteRecord);\r\n}\r\nfunction isRouteMatching(route, filter) {\r\n    const found = String(route.re).match(EXTRACT_REGEXP_RE);\r\n    route.__vd_match = false;\r\n    if (!found || found.length < 3) {\r\n        return false;\r\n    }\r\n    // use a regexp without $ at the end to match nested routes better\r\n    const nonEndingRE = new RegExp(found[1].replace(/\\$$/, ''), found[2]);\r\n    if (nonEndingRE.test(filter)) {\r\n        // mark children as matches\r\n        route.children.forEach(child => isRouteMatching(child, filter));\r\n        // exception case: `/`\r\n        if (route.record.path !== '/' || filter === '/') {\r\n            route.__vd_match = route.re.test(filter);\r\n            return true;\r\n        }\r\n        // hide the / route\r\n        return false;\r\n    }\r\n    const path = route.record.path.toLowerCase();\r\n    const decodedPath = decode(path);\r\n    // also allow partial matching on the path\r\n    if (!filter.startsWith('/') &&\r\n        (decodedPath.includes(filter) || path.includes(filter)))\r\n        return true;\r\n    if (decodedPath.startsWith(filter) || path.startsWith(filter))\r\n        return true;\r\n    if (route.record.name && String(route.record.name).includes(filter))\r\n        return true;\r\n    return route.children.some(child => isRouteMatching(child, filter));\r\n}\r\nfunction omit(obj, keys) {\r\n    const ret = {};\r\n    for (const key in obj) {\r\n        if (!keys.includes(key)) {\r\n            // @ts-expect-error\r\n            ret[key] = obj[key];\r\n        }\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * Creates a Router instance that can be used by a Vue app.\r\n *\r\n * @param options - {@link RouterOptions}\r\n */\r\nfunction createRouter(options) {\r\n    const matcher = createRouterMatcher(options.routes, options);\r\n    const parseQuery$1 = options.parseQuery || parseQuery;\r\n    const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;\r\n    const routerHistory = options.history;\r\n    if ((process.env.NODE_ENV !== 'production') && !routerHistory)\r\n        throw new Error('Provide the \"history\" option when calling \"createRouter()\":' +\r\n            ' https://next.router.vuejs.org/api/#history.');\r\n    const beforeGuards = useCallbacks();\r\n    const beforeResolveGuards = useCallbacks();\r\n    const afterGuards = useCallbacks();\r\n    const currentRoute = shallowRef(START_LOCATION_NORMALIZED);\r\n    let pendingLocation = START_LOCATION_NORMALIZED;\r\n    // leave the scrollRestoration if no scrollBehavior is provided\r\n    if (isBrowser && options.scrollBehavior && 'scrollRestoration' in history) {\r\n        history.scrollRestoration = 'manual';\r\n    }\r\n    const normalizeParams = applyToParams.bind(null, paramValue => '' + paramValue);\r\n    const encodeParams = applyToParams.bind(null, encodeParam);\r\n    const decodeParams = \r\n    // @ts-expect-error: intentionally avoid the type check\r\n    applyToParams.bind(null, decode);\r\n    function addRoute(parentOrRoute, route) {\r\n        let parent;\r\n        let record;\r\n        if (isRouteName(parentOrRoute)) {\r\n            parent = matcher.getRecordMatcher(parentOrRoute);\r\n            record = route;\r\n        }\r\n        else {\r\n            record = parentOrRoute;\r\n        }\r\n        return matcher.addRoute(record, parent);\r\n    }\r\n    function removeRoute(name) {\r\n        const recordMatcher = matcher.getRecordMatcher(name);\r\n        if (recordMatcher) {\r\n            matcher.removeRoute(recordMatcher);\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`Cannot remove non-existent route \"${String(name)}\"`);\r\n        }\r\n    }\r\n    function getRoutes() {\r\n        return matcher.getRoutes().map(routeMatcher => routeMatcher.record);\r\n    }\r\n    function hasRoute(name) {\r\n        return !!matcher.getRecordMatcher(name);\r\n    }\r\n    function resolve(rawLocation, currentLocation) {\r\n        // const objectLocation = routerLocationAsObject(rawLocation)\r\n        // we create a copy to modify it later\r\n        currentLocation = assign({}, currentLocation || currentRoute.value);\r\n        if (typeof rawLocation === 'string') {\r\n            const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);\r\n            const matchedRoute = matcher.resolve({ path: locationNormalized.path }, currentLocation);\r\n            const href = routerHistory.createHref(locationNormalized.fullPath);\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (href.startsWith('//'))\r\n                    warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);\r\n                else if (!matchedRoute.matched.length) {\r\n                    warn(`No match found for location with path \"${rawLocation}\"`);\r\n                }\r\n            }\r\n            // locationNormalized is always a new object\r\n            return assign(locationNormalized, matchedRoute, {\r\n                params: decodeParams(matchedRoute.params),\r\n                hash: decode(locationNormalized.hash),\r\n                redirectedFrom: undefined,\r\n                href,\r\n            });\r\n        }\r\n        let matcherLocation;\r\n        // path could be relative in object as well\r\n        if ('path' in rawLocation) {\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                'params' in rawLocation &&\r\n                !('name' in rawLocation) &&\r\n                Object.keys(rawLocation.params).length) {\r\n                warn(`Path \"${rawLocation.path}\" was passed with params but they will be ignored. Use a named route alongside params instead.`);\r\n            }\r\n            matcherLocation = assign({}, rawLocation, {\r\n                path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path,\r\n            });\r\n        }\r\n        else {\r\n            // remove any nullish param\r\n            const targetParams = assign({}, rawLocation.params);\r\n            for (const key in targetParams) {\r\n                if (targetParams[key] == null) {\r\n                    delete targetParams[key];\r\n                }\r\n            }\r\n            // pass encoded values to the matcher so it can produce encoded path and fullPath\r\n            matcherLocation = assign({}, rawLocation, {\r\n                params: encodeParams(rawLocation.params),\r\n            });\r\n            // current location params are decoded, we need to encode them in case the\r\n            // matcher merges the params\r\n            currentLocation.params = encodeParams(currentLocation.params);\r\n        }\r\n        const matchedRoute = matcher.resolve(matcherLocation, currentLocation);\r\n        const hash = rawLocation.hash || '';\r\n        if ((process.env.NODE_ENV !== 'production') && hash && !hash.startsWith('#')) {\r\n            warn(`A \\`hash\\` should always start with the character \"#\". Replace \"${hash}\" with \"#${hash}\".`);\r\n        }\r\n        // decoding them) the matcher might have merged current location params so\r\n        // we need to run the decoding again\r\n        matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));\r\n        const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {\r\n            hash: encodeHash(hash),\r\n            path: matchedRoute.path,\r\n        }));\r\n        const href = routerHistory.createHref(fullPath);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            if (href.startsWith('//')) {\r\n                warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);\r\n            }\r\n            else if (!matchedRoute.matched.length) {\r\n                warn(`No match found for location with path \"${'path' in rawLocation ? rawLocation.path : rawLocation}\"`);\r\n            }\r\n        }\r\n        return assign({\r\n            fullPath,\r\n            // keep the hash encoded so fullPath is effectively path + encodedQuery +\r\n            // hash\r\n            hash,\r\n            query: \r\n            // if the user is using a custom query lib like qs, we might have\r\n            // nested objects, so we keep the query as is, meaning it can contain\r\n            // numbers at `$route.query`, but at the point, the user will have to\r\n            // use their own type anyway.\r\n            // https://github.com/vuejs/vue-router-next/issues/328#issuecomment-649481567\r\n            stringifyQuery$1 === stringifyQuery\r\n                ? normalizeQuery(rawLocation.query)\r\n                : (rawLocation.query || {}),\r\n        }, matchedRoute, {\r\n            redirectedFrom: undefined,\r\n            href,\r\n        });\r\n    }\r\n    function locationAsObject(to) {\r\n        return typeof to === 'string'\r\n            ? parseURL(parseQuery$1, to, currentRoute.value.path)\r\n            : assign({}, to);\r\n    }\r\n    function checkCanceledNavigation(to, from) {\r\n        if (pendingLocation !== to) {\r\n            return createRouterError(8 /* NAVIGATION_CANCELLED */, {\r\n                from,\r\n                to,\r\n            });\r\n        }\r\n    }\r\n    function push(to) {\r\n        return pushWithRedirect(to);\r\n    }\r\n    function replace(to) {\r\n        return push(assign(locationAsObject(to), { replace: true }));\r\n    }\r\n    function handleRedirectRecord(to) {\r\n        const lastMatched = to.matched[to.matched.length - 1];\r\n        if (lastMatched && lastMatched.redirect) {\r\n            const { redirect } = lastMatched;\r\n            let newTargetLocation = typeof redirect === 'function' ? redirect(to) : redirect;\r\n            if (typeof newTargetLocation === 'string') {\r\n                newTargetLocation =\r\n                    newTargetLocation.includes('?') || newTargetLocation.includes('#')\r\n                        ? (newTargetLocation = locationAsObject(newTargetLocation))\r\n                        : // force empty params\r\n                            { path: newTargetLocation };\r\n                // @ts-expect-error: force empty params when a string is passed to let\r\n                // the router parse them again\r\n                newTargetLocation.params = {};\r\n            }\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                !('path' in newTargetLocation) &&\r\n                !('name' in newTargetLocation)) {\r\n                warn(`Invalid redirect found:\\n${JSON.stringify(newTargetLocation, null, 2)}\\n when navigating to \"${to.fullPath}\". A redirect must contain a name or path. This will break in production.`);\r\n                throw new Error('Invalid redirect');\r\n            }\r\n            return assign({\r\n                query: to.query,\r\n                hash: to.hash,\r\n                params: to.params,\r\n            }, newTargetLocation);\r\n        }\r\n    }\r\n    function pushWithRedirect(to, redirectedFrom) {\r\n        const targetLocation = (pendingLocation = resolve(to));\r\n        const from = currentRoute.value;\r\n        const data = to.state;\r\n        const force = to.force;\r\n        // to could be a string where `replace` is a function\r\n        const replace = to.replace === true;\r\n        const shouldRedirect = handleRedirectRecord(targetLocation);\r\n        if (shouldRedirect)\r\n            return pushWithRedirect(assign(locationAsObject(shouldRedirect), {\r\n                state: data,\r\n                force,\r\n                replace,\r\n            }), \r\n            // keep original redirectedFrom if it exists\r\n            redirectedFrom || targetLocation);\r\n        // if it was a redirect we already called `pushWithRedirect` above\r\n        const toLocation = targetLocation;\r\n        toLocation.redirectedFrom = redirectedFrom;\r\n        let failure;\r\n        if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {\r\n            failure = createRouterError(16 /* NAVIGATION_DUPLICATED */, { to: toLocation, from });\r\n            // trigger scroll to allow scrolling to the same anchor\r\n            handleScroll(from, from, \r\n            // this is a push, the only way for it to be triggered from a\r\n            // history.listen is with a redirect, which makes it become a push\r\n            true, \r\n            // This cannot be the first navigation because the initial location\r\n            // cannot be manually navigated to\r\n            false);\r\n        }\r\n        return (failure ? Promise.resolve(failure) : navigate(toLocation, from))\r\n            .catch((error) => isNavigationFailure(error)\r\n            ? error\r\n            : // reject any unknown error\r\n                triggerError(error, toLocation, from))\r\n            .then((failure) => {\r\n            if (failure) {\r\n                if (isNavigationFailure(failure, 2 /* NAVIGATION_GUARD_REDIRECT */)) {\r\n                    if ((process.env.NODE_ENV !== 'production') &&\r\n                        // we are redirecting to the same location we were already at\r\n                        isSameRouteLocation(stringifyQuery$1, resolve(failure.to), toLocation) &&\r\n                        // and we have done it a couple of times\r\n                        redirectedFrom &&\r\n                        // @ts-expect-error: added only in dev\r\n                        (redirectedFrom._count = redirectedFrom._count\r\n                            ? // @ts-expect-error\r\n                                redirectedFrom._count + 1\r\n                            : 1) > 10) {\r\n                        warn(`Detected an infinite redirection in a navigation guard when going from \"${from.fullPath}\" to \"${toLocation.fullPath}\". Aborting to avoid a Stack Overflow. This will break in production if not fixed.`);\r\n                        return Promise.reject(new Error('Infinite redirect in navigation guard'));\r\n                    }\r\n                    return pushWithRedirect(\r\n                    // keep options\r\n                    assign(locationAsObject(failure.to), {\r\n                        state: data,\r\n                        force,\r\n                        replace,\r\n                    }), \r\n                    // preserve the original redirectedFrom if any\r\n                    redirectedFrom || toLocation);\r\n                }\r\n            }\r\n            else {\r\n                // if we fail we don't finalize the navigation\r\n                failure = finalizeNavigation(toLocation, from, true, replace, data);\r\n            }\r\n            triggerAfterEach(toLocation, from, failure);\r\n            return failure;\r\n        });\r\n    }\r\n    /**\r\n     * Helper to reject and skip all navigation guards if a new navigation happened\r\n     * @param to\r\n     * @param from\r\n     */\r\n    function checkCanceledNavigationAndReject(to, from) {\r\n        const error = checkCanceledNavigation(to, from);\r\n        return error ? Promise.reject(error) : Promise.resolve();\r\n    }\r\n    // TODO: refactor the whole before guards by internally using router.beforeEach\r\n    function navigate(to, from) {\r\n        let guards;\r\n        const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to, from);\r\n        // all components here have been resolved once because we are leaving\r\n        guards = extractComponentsGuards(leavingRecords.reverse(), 'beforeRouteLeave', to, from);\r\n        // leavingRecords is already reversed\r\n        for (const record of leavingRecords) {\r\n            record.leaveGuards.forEach(guard => {\r\n                guards.push(guardToPromiseFn(guard, to, from));\r\n            });\r\n        }\r\n        const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to, from);\r\n        guards.push(canceledNavigationCheck);\r\n        // run the queue of per route beforeRouteLeave guards\r\n        return (runGuardQueue(guards)\r\n            .then(() => {\r\n            // check global guards beforeEach\r\n            guards = [];\r\n            for (const guard of beforeGuards.list()) {\r\n                guards.push(guardToPromiseFn(guard, to, from));\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // check in components beforeRouteUpdate\r\n            guards = extractComponentsGuards(updatingRecords, 'beforeRouteUpdate', to, from);\r\n            for (const record of updatingRecords) {\r\n                record.updateGuards.forEach(guard => {\r\n                    guards.push(guardToPromiseFn(guard, to, from));\r\n                });\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            // run the queue of per route beforeEnter guards\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // check the route beforeEnter\r\n            guards = [];\r\n            for (const record of to.matched) {\r\n                // do not trigger beforeEnter on reused views\r\n                if (record.beforeEnter && !from.matched.includes(record)) {\r\n                    if (Array.isArray(record.beforeEnter)) {\r\n                        for (const beforeEnter of record.beforeEnter)\r\n                            guards.push(guardToPromiseFn(beforeEnter, to, from));\r\n                    }\r\n                    else {\r\n                        guards.push(guardToPromiseFn(record.beforeEnter, to, from));\r\n                    }\r\n                }\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            // run the queue of per route beforeEnter guards\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // NOTE: at this point to.matched is normalized and does not contain any () => Promise<Component>\r\n            // clear existing enterCallbacks, these are added by extractComponentsGuards\r\n            to.matched.forEach(record => (record.enterCallbacks = {}));\r\n            // check in-component beforeRouteEnter\r\n            guards = extractComponentsGuards(enteringRecords, 'beforeRouteEnter', to, from);\r\n            guards.push(canceledNavigationCheck);\r\n            // run the queue of per route beforeEnter guards\r\n            return runGuardQueue(guards);\r\n        })\r\n            .then(() => {\r\n            // check global guards beforeResolve\r\n            guards = [];\r\n            for (const guard of beforeResolveGuards.list()) {\r\n                guards.push(guardToPromiseFn(guard, to, from));\r\n            }\r\n            guards.push(canceledNavigationCheck);\r\n            return runGuardQueue(guards);\r\n        })\r\n            // catch any navigation canceled\r\n            .catch(err => isNavigationFailure(err, 8 /* NAVIGATION_CANCELLED */)\r\n            ? err\r\n            : Promise.reject(err)));\r\n    }\r\n    function triggerAfterEach(to, from, failure) {\r\n        // navigation is confirmed, call afterGuards\r\n        // TODO: wrap with error handlers\r\n        for (const guard of afterGuards.list())\r\n            guard(to, from, failure);\r\n    }\r\n    /**\r\n     * - Cleans up any navigation guards\r\n     * - Changes the url if necessary\r\n     * - Calls the scrollBehavior\r\n     */\r\n    function finalizeNavigation(toLocation, from, isPush, replace, data) {\r\n        // a more recent navigation took place\r\n        const error = checkCanceledNavigation(toLocation, from);\r\n        if (error)\r\n            return error;\r\n        // only consider as push if it's not the first navigation\r\n        const isFirstNavigation = from === START_LOCATION_NORMALIZED;\r\n        const state = !isBrowser ? {} : history.state;\r\n        // change URL only if the user did a push/replace and if it's not the initial navigation because\r\n        // it's just reflecting the url\r\n        if (isPush) {\r\n            // on the initial navigation, we want to reuse the scroll position from\r\n            // history state if it exists\r\n            if (replace || isFirstNavigation)\r\n                routerHistory.replace(toLocation.fullPath, assign({\r\n                    scroll: isFirstNavigation && state && state.scroll,\r\n                }, data));\r\n            else\r\n                routerHistory.push(toLocation.fullPath, data);\r\n        }\r\n        // accept current navigation\r\n        currentRoute.value = toLocation;\r\n        handleScroll(toLocation, from, isPush, isFirstNavigation);\r\n        markAsReady();\r\n    }\r\n    let removeHistoryListener;\r\n    // attach listener to history to trigger navigations\r\n    function setupListeners() {\r\n        removeHistoryListener = routerHistory.listen((to, _from, info) => {\r\n            // cannot be a redirect route because it was in history\r\n            const toLocation = resolve(to);\r\n            // due to dynamic routing, and to hash history with manual navigation\r\n            // (manually changing the url or calling history.hash = '#/somewhere'),\r\n            // there could be a redirect record in history\r\n            const shouldRedirect = handleRedirectRecord(toLocation);\r\n            if (shouldRedirect) {\r\n                pushWithRedirect(assign(shouldRedirect, { replace: true }), toLocation).catch(noop);\r\n                return;\r\n            }\r\n            pendingLocation = toLocation;\r\n            const from = currentRoute.value;\r\n            // TODO: should be moved to web history?\r\n            if (isBrowser) {\r\n                saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());\r\n            }\r\n            navigate(toLocation, from)\r\n                .catch((error) => {\r\n                if (isNavigationFailure(error, 4 /* NAVIGATION_ABORTED */ | 8 /* NAVIGATION_CANCELLED */)) {\r\n                    return error;\r\n                }\r\n                if (isNavigationFailure(error, 2 /* NAVIGATION_GUARD_REDIRECT */)) {\r\n                    // Here we could call if (info.delta) routerHistory.go(-info.delta,\r\n                    // false) but this is bug prone as we have no way to wait the\r\n                    // navigation to be finished before calling pushWithRedirect. Using\r\n                    // a setTimeout of 16ms seems to work but there is not guarantee for\r\n                    // it to work on every browser. So Instead we do not restore the\r\n                    // history entry and trigger a new navigation as requested by the\r\n                    // navigation guard.\r\n                    // the error is already handled by router.push we just want to avoid\r\n                    // logging the error\r\n                    pushWithRedirect(error.to, toLocation\r\n                    // avoid an uncaught rejection, let push call triggerError\r\n                    )\r\n                        .then(failure => {\r\n                        // manual change in hash history #916 ending up in the URL not\r\n                        // changing but it was changed by the manual url change, so we\r\n                        // need to manually change it ourselves\r\n                        if (isNavigationFailure(failure, 4 /* NAVIGATION_ABORTED */ |\r\n                            16 /* NAVIGATION_DUPLICATED */) &&\r\n                            !info.delta &&\r\n                            info.type === NavigationType.pop) {\r\n                            routerHistory.go(-1, false);\r\n                        }\r\n                    })\r\n                        .catch(noop);\r\n                    // avoid the then branch\r\n                    return Promise.reject();\r\n                }\r\n                // do not restore history on unknown direction\r\n                if (info.delta)\r\n                    routerHistory.go(-info.delta, false);\r\n                // unrecognized error, transfer to the global handler\r\n                return triggerError(error, toLocation, from);\r\n            })\r\n                .then((failure) => {\r\n                failure =\r\n                    failure ||\r\n                        finalizeNavigation(\r\n                        // after navigation, all matched components are resolved\r\n                        toLocation, from, false);\r\n                // revert the navigation\r\n                if (failure) {\r\n                    if (info.delta) {\r\n                        routerHistory.go(-info.delta, false);\r\n                    }\r\n                    else if (info.type === NavigationType.pop &&\r\n                        isNavigationFailure(failure, 4 /* NAVIGATION_ABORTED */ | 16 /* NAVIGATION_DUPLICATED */)) {\r\n                        // manual change in hash history #916\r\n                        // it's like a push but lacks the information of the direction\r\n                        routerHistory.go(-1, false);\r\n                    }\r\n                }\r\n                triggerAfterEach(toLocation, from, failure);\r\n            })\r\n                .catch(noop);\r\n        });\r\n    }\r\n    // Initialization and Errors\r\n    let readyHandlers = useCallbacks();\r\n    let errorHandlers = useCallbacks();\r\n    let ready;\r\n    /**\r\n     * Trigger errorHandlers added via onError and throws the error as well\r\n     *\r\n     * @param error - error to throw\r\n     * @param to - location we were navigating to when the error happened\r\n     * @param from - location we were navigating from when the error happened\r\n     * @returns the error as a rejected promise\r\n     */\r\n    function triggerError(error, to, from) {\r\n        markAsReady(error);\r\n        const list = errorHandlers.list();\r\n        if (list.length) {\r\n            list.forEach(handler => handler(error, to, from));\r\n        }\r\n        else {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                warn('uncaught error during route navigation:');\r\n            }\r\n            console.error(error);\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n    function isReady() {\r\n        if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)\r\n            return Promise.resolve();\r\n        return new Promise((resolve, reject) => {\r\n            readyHandlers.add([resolve, reject]);\r\n        });\r\n    }\r\n    /**\r\n     * Mark the router as ready, resolving the promised returned by isReady(). Can\r\n     * only be called once, otherwise does nothing.\r\n     * @param err - optional error\r\n     */\r\n    function markAsReady(err) {\r\n        if (ready)\r\n            return;\r\n        ready = true;\r\n        setupListeners();\r\n        readyHandlers\r\n            .list()\r\n            .forEach(([resolve, reject]) => (err ? reject(err) : resolve()));\r\n        readyHandlers.reset();\r\n    }\r\n    // Scroll behavior\r\n    function handleScroll(to, from, isPush, isFirstNavigation) {\r\n        const { scrollBehavior } = options;\r\n        if (!isBrowser || !scrollBehavior)\r\n            return Promise.resolve();\r\n        const scrollPosition = (!isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0))) ||\r\n            ((isFirstNavigation || !isPush) &&\r\n                history.state &&\r\n                history.state.scroll) ||\r\n            null;\r\n        return nextTick()\r\n            .then(() => scrollBehavior(to, from, scrollPosition))\r\n            .then(position => position && scrollToPosition(position))\r\n            .catch(err => triggerError(err, to, from));\r\n    }\r\n    const go = (delta) => routerHistory.go(delta);\r\n    let started;\r\n    const installedApps = new Set();\r\n    const router = {\r\n        currentRoute,\r\n        addRoute,\r\n        removeRoute,\r\n        hasRoute,\r\n        getRoutes,\r\n        resolve,\r\n        options,\r\n        push,\r\n        replace,\r\n        go,\r\n        back: () => go(-1),\r\n        forward: () => go(1),\r\n        beforeEach: beforeGuards.add,\r\n        beforeResolve: beforeResolveGuards.add,\r\n        afterEach: afterGuards.add,\r\n        onError: errorHandlers.add,\r\n        isReady,\r\n        install(app) {\r\n            const router = this;\r\n            app.component('RouterLink', RouterLink);\r\n            app.component('RouterView', RouterView);\r\n            app.config.globalProperties.$router = router;\r\n            Object.defineProperty(app.config.globalProperties, '$route', {\r\n                enumerable: true,\r\n                get: () => unref(currentRoute),\r\n            });\r\n            // this initial navigation is only necessary on client, on server it doesn't\r\n            // make sense because it will create an extra unnecessary navigation and could\r\n            // lead to problems\r\n            if (isBrowser &&\r\n                // used for the initial navigation client side to avoid pushing\r\n                // multiple times when the router is used in multiple apps\r\n                !started &&\r\n                currentRoute.value === START_LOCATION_NORMALIZED) {\r\n                // see above\r\n                started = true;\r\n                push(routerHistory.location).catch(err => {\r\n                    if ((process.env.NODE_ENV !== 'production'))\r\n                        warn('Unexpected error when starting the router:', err);\r\n                });\r\n            }\r\n            const reactiveRoute = {};\r\n            for (const key in START_LOCATION_NORMALIZED) {\r\n                // @ts-expect-error: the key matches\r\n                reactiveRoute[key] = computed(() => currentRoute.value[key]);\r\n            }\r\n            app.provide(routerKey, router);\r\n            app.provide(routeLocationKey, reactive(reactiveRoute));\r\n            app.provide(routerViewLocationKey, currentRoute);\r\n            const unmountApp = app.unmount;\r\n            installedApps.add(app);\r\n            app.unmount = function () {\r\n                installedApps.delete(app);\r\n                // the router is not attached to an app anymore\r\n                if (installedApps.size < 1) {\r\n                    // invalidate the current navigation\r\n                    pendingLocation = START_LOCATION_NORMALIZED;\r\n                    removeHistoryListener && removeHistoryListener();\r\n                    currentRoute.value = START_LOCATION_NORMALIZED;\r\n                    started = false;\r\n                    ready = false;\r\n                }\r\n                unmountApp();\r\n            };\r\n            if (((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) && isBrowser) {\r\n                addDevtools(app, router, matcher);\r\n            }\r\n        },\r\n    };\r\n    return router;\r\n}\r\nfunction runGuardQueue(guards) {\r\n    return guards.reduce((promise, guard) => promise.then(() => guard()), Promise.resolve());\r\n}\r\nfunction extractChangingRecords(to, from) {\r\n    const leavingRecords = [];\r\n    const updatingRecords = [];\r\n    const enteringRecords = [];\r\n    const len = Math.max(from.matched.length, to.matched.length);\r\n    for (let i = 0; i < len; i++) {\r\n        const recordFrom = from.matched[i];\r\n        if (recordFrom) {\r\n            if (to.matched.find(record => isSameRouteRecord(record, recordFrom)))\r\n                updatingRecords.push(recordFrom);\r\n            else\r\n                leavingRecords.push(recordFrom);\r\n        }\r\n        const recordTo = to.matched[i];\r\n        if (recordTo) {\r\n            // the type doesn't matter because we are comparing per reference\r\n            if (!from.matched.find(record => isSameRouteRecord(record, recordTo))) {\r\n                enteringRecords.push(recordTo);\r\n            }\r\n        }\r\n    }\r\n    return [leavingRecords, updatingRecords, enteringRecords];\r\n}\n\n/**\r\n * Returns the router instance. Equivalent to using `$router` inside\r\n * templates.\r\n */\r\nfunction useRouter() {\r\n    return inject(routerKey);\r\n}\r\n/**\r\n * Returns the current route location. Equivalent to using `$route` inside\r\n * templates.\r\n */\r\nfunction useRoute() {\r\n    return inject(routeLocationKey);\r\n}\n\nexport { NavigationFailureType, RouterLink, RouterView, START_LOCATION_NORMALIZED as START_LOCATION, createMemoryHistory, createRouter, createRouterMatcher, createWebHashHistory, createWebHistory, isNavigationFailure, matchedRouteKey, onBeforeRouteLeave, onBeforeRouteUpdate, parseQuery, routeLocationKey, routerKey, routerViewLocationKey, stringifyQuery, useLink, useRoute, useRouter, viewDepthKey };\n","import { getTarget, getDevtoolsGlobalHook } from './env';\nimport { HOOK_SETUP } from './const';\nexport * from './api';\nexport function setupDevtoolsPlugin(pluginDescriptor, setupFn) {\n    const hook = getDevtoolsGlobalHook();\n    if (hook) {\n        hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);\n    }\n    else {\n        const target = getTarget();\n        const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];\n        list.push({\n            pluginDescriptor,\n            setupFn\n        });\n    }\n}\n","export const HOOK_SETUP = 'devtools-plugin:setup';\n"],"names":["getTarget","navigator","window","global","hasSymbol","Symbol","toStringTag","PolySymbol","name","matchedRouteKey","viewDepthKey","routerKey","routeLocationKey","routerViewLocationKey","isBrowser","assign","Object","applyToParams","fn","params","newParams","key","value","Array","isArray","map","noop","TRAILING_SLASH_RE","parseURL","parseQuery","location","currentLocation","path","query","searchString","hash","searchPos","indexOf","hashPos","slice","length","to","from","startsWith","fromSegments","split","toSegments","toPosition","segment","position","join","resolveRelativePath","fullPath","stripBase","pathname","base","toLowerCase","isSameRouteRecord","a","b","aliasOf","isSameRouteLocationParams","keys","isSameRouteLocationParamsValue","isEquivalentArray","every","i","NavigationType","NavigationDirection","BEFORE_HASH_RE","createHref","replace","computeScrollPosition","left","pageXOffset","top","pageYOffset","getScrollKey","delta","history","state","scrollPositions","Map","createBaseLocation","protocol","host","createCurrentLocation","search","slicePos","includes","pathFromHash","buildState","back","current","forward","replaced","computeScroll","scroll","createWebHistory","historyNavigation","historyState","changeLocation","hashIndex","url","document","querySelector","err","console","error","push","data","currentState","useHistoryStateNavigation","baseEl","getAttribute","normalizeBase","historyListeners","listeners","teardowns","pauseState","popStateHandler","fromState","forEach","listener","type","pop","direction","unknown","beforeUnloadListener","replaceState","addEventListener","pauseListeners","listen","callback","teardown","index","splice","destroy","removeEventListener","useHistoryListeners","routerHistory","go","triggerListeners","bind","defineProperty","enumerable","get","createMemoryHistory","queue","setLocation","shouldTrigger","this","Math","max","min","info","createWebHashHistory","isRouteName","START_LOCATION_NORMALIZED","undefined","matched","meta","redirectedFrom","NavigationFailureSymbol","NavigationFailureType","createRouterError","Error","isNavigationFailure","BASE_PARAM_PATTERN","BASE_PATH_PARSER_OPTIONS","sensitive","strict","start","end","REGEX_CHARS_RE","compareScoreArray","diff","comparePathParserScore","aScore","score","bScore","comp","ROOT_TOKEN","VALID_PARAM_RE","createRouteRecordMatcher","record","parent","options","parser","segments","extraOptions","pattern","segmentScores","tokenIndex","token","subSegmentScore","repeatable","optional","regexp","re","RegExp","message","subPattern","parse","match","stringify","avoidDuplicatedSlash","endsWith","param","text","tokensToParser","crash","buffer","previousState","tokens","finalizeSegment","char","customRe","consumeBuffer","addCharToBuffer","test","tokenizePath","matcher","children","alias","createRouterMatcher","routes","globalOptions","matchers","matcherMap","addRoute","originalRecord","isRootAdd","mainNormalizedRecord","redirect","beforeEnter","props","normalizeRecordProps","instances","leaveGuards","Set","updateGuards","enterCallbacks","components","default","component","normalizeRouteRecord","mergeOptions","normalizedRecords","aliases","originalMatcher","normalizedRecord","parentPath","connectingSlash","isAliasRecord","removeRoute","insertMatcher","matcherRef","delete","set","route","resolve","paramsFromLocation","filter","k","find","m","parentMatcher","unshift","mergeMetaFields","getRoutes","getRecordMatcher","propsObject","reduce","defaults","partialOptions","HASH_RE","AMPERSAND_RE","SLASH_RE","EQUAL_RE","IM_RE","PLUS_RE","ENC_BRACKET_OPEN_RE","ENC_BRACKET_CLOSE_RE","ENC_CARET_RE","ENC_BACKTICK_RE","ENC_CURLY_OPEN_RE","ENC_PIPE_RE","ENC_CURLY_CLOSE_RE","ENC_SPACE_RE","commonEncode","encodeURI","encodeQueryValue","encodeParam","encodePath","decode","decodeURIComponent","searchParams","searchParam","eqPos","currentValue","stringifyQuery","v","normalizeQuery","normalizedQuery","useCallbacks","handlers","add","handler","list","reset","registerGuard","guard","removeFromList","onUnmounted","onDeactivated","onActivated","onBeforeRouteLeave","leaveGuard","activeRecord","inject","onBeforeRouteUpdate","updateGuard","guardToPromiseFn","enterCallbackArray","Promise","reject","next","valid","guardReturn","call","guardCall","then","catch","extractComponentsGuards","guardType","guards","rawComponent","__vccOpts","componentPromise","resolved","resolvedComponent","obj","__esModule","useLink","router","currentRoute","computed","unref","activeRecordIndex","routeMatched","currentMatched","findIndex","parentRecordPath","getOriginalPath","isActive","outer","inner","innerValue","outerValue","some","includesParams","isExactActive","__VUE_PROD_DEVTOOLS__","instance","getCurrentInstance","linkContextDevtools","__vrl_devtools","watchEffect","flush","href","navigate","e","metaKey","altKey","ctrlKey","shiftKey","defaultPrevented","button","currentTarget","target","preventDefault","guardEvent","RouterLink","defineComponent","String","required","Boolean","activeClass","exactActiveClass","custom","ariaCurrentValue","setup","slots","link","reactive","elClass","getLinkClass","linkActiveClass","linkExactActiveClass","h","onClick","class","propClass","globalClass","defaultClass","normalizeSlot","slot","slotContent","RouterView","inheritAttrs","attrs","injectedRoute","routeToDisplay","depth","matchedRouteRef","provide","viewRef","ref","watch","oldInstance","oldName","size","matchedRoute","ViewComponent","currentName","Component","routePropsOption","routeProps","onVnodeUnmounted","vnode","isUnmounted","formatRouteLocation","routeLocation","tooltip","copy","ret","omit","_custom","readOnly","display","formatDisplay","routerId","addDevtools","app","__hasDevtools","id","pluginDescriptor","setupFn","hook","__VUE_DEVTOOLS_GLOBAL_HOOK__","emit","__VUE_DEVTOOLS_PLUGINS__","setupDevtoolsPlugin","label","packageName","homepage","logo","componentStateTypes","api","on","inspectComponent","payload","ctx","instanceData","editable","visitComponentTree","treeNode","node","componentInstance","__devtoolsApi","devtoolsData","backgroundColor","ORANGE_400","LIME_500","BLUE_600","tags","textColor","refreshRoutesView","notifyComponentUpdate","sendInspectorTree","routerInspectorId","sendInspectorState","navigationsLayerId","addTimelineLayer","color","onError","addTimelineEvent","layerId","event","title","subtitle","logType","time","Date","now","groupId","__navigationId","navigationId","beforeEach","afterEach","failure","status","activeRoutesPayload","resetMatchStateOnRouteRecord","isRouteMatching","markRouteRecordActive","rootNodes","formatRouteRecordForInspector","addInspector","icon","treeFilterPlaceholder","getInspectorTree","inspectorId","getInspectorState","__vd_id","nodeId","formatRouteRecordMatcherForStateInspector","fields","modifierForKey","__vd_match","__vd_exactActive","__vd_active","routeRecordId","EXTRACT_REGEXP_RE","childRoute","found","child","decodedPath","createRouter","parseQuery$1","stringifyQuery$1","beforeGuards","beforeResolveGuards","afterGuards","shallowRef","pendingLocation","scrollBehavior","scrollRestoration","normalizeParams","paramValue","encodeParams","decodeParams","rawLocation","locationNormalized","matcherLocation","targetParams","stringifyURL","locationAsObject","checkCanceledNavigation","pushWithRedirect","handleRedirectRecord","lastMatched","newTargetLocation","targetLocation","force","shouldRedirect","toLocation","aLastIndex","bLastIndex","isSameRouteLocation","handleScroll","triggerError","finalizeNavigation","triggerAfterEach","checkCanceledNavigationAndReject","leavingRecords","updatingRecords","enteringRecords","len","recordFrom","recordTo","extractChangingRecords","reverse","canceledNavigationCheck","runGuardQueue","isPush","isFirstNavigation","markAsReady","removeHistoryListener","ready","readyHandlers","errorHandlers","_from","scrollPosition","getSavedScrollPosition","nextTick","scrollToOptions","positionEl","el","isIdSelector","getElementById","offset","docRect","documentElement","getBoundingClientRect","elRect","behavior","getElementPosition","style","scrollTo","scrollToPosition","started","installedApps","parentOrRoute","recordMatcher","hasRoute","routeMatcher","beforeResolve","isReady","install","config","globalProperties","$router","reactiveRoute","unmountApp","unmount","promise","useRouter","useRoute"],"sourceRoot":""}